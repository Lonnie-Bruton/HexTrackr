version: '3.8'

services:
  # Nginx Web Server - Serves static files and proxies API calls
  nginx:
    image: nginx:alpine
    container_name: hextrackr-nginx
    ports:
      - "3040:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./:/usr/share/nginx/html
    depends_on:
      - api
    networks:
      - hextrackr-network
    restart: unless-stopped

  # Node.js API Backend
  api:
    build: .
    container_name: hextrackr-api
    ports:
      - "3041:3040"
    environment:
      - NODE_ENV=production
      - PORT=3040
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
    networks:
      - hextrackr-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3040/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python/Ansible Service (Future)
  automation:
    build: 
      context: .
      dockerfile: Dockerfile.python
    container_name: hextrackr-automation
    ports:
      - "3042:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
    volumes:
      - ./automation:/app
      - ./data:/app/data
      - ./playbooks:/app/playbooks
    networks:
      - hextrackr-network
    restart: unless-stopped
    profiles:
      - automation
    depends_on:
      - api

  # Redis for caching and task queues (Future)
  redis:
    image: redis:alpine
    container_name: hextrackr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - hextrackr-network
    restart: unless-stopped
    profiles:
      - cache

  # PostgreSQL for production database (Future)
  postgres:
    image: postgres:15-alpine
    container_name: hextrackr-postgres
    environment:
      - POSTGRES_DB=hextrackr
      - POSTGRES_USER=hextrackr
      - POSTGRES_PASSWORD=hextrackr_secure_2025
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - hextrackr-network
    restart: unless-stopped
    profiles:
      - production-db

networks:
  hextrackr-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
