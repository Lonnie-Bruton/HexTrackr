#!/usr/bin/env node

/**
 * Collect Button Analysis Script - For Gemini API
 * Analysis of StackTrackr collect button toggle visual mismatch issue
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables
dotenv.config({ path: path.join(__dirname, '..', 'rEngine', '.env') });

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  console.error('‚ùå GEMINI_API_KEY not found in rEngine/.env');
  process.exit(1);
}

async function analyzeCollectButtons() {
  const { GoogleGenerativeAI } = await import('@google/generative-ai');
  
  try {
    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' });

    // Read relevant files
    const stylesPath = '/Volumes/DATA/GitHub/rEngine/rProjects/StackTrackr/css/styles.css';
    const eventsPath = '/Volumes/DATA/GitHub/rEngine/rProjects/StackTrackr/js/events.js';
    const inventoryPath = '/Volumes/DATA/GitHub/rEngine/rProjects/StackTrackr/js/inventory.js';
    const htmlPath = '/Volumes/DATA/GitHub/rEngine/rProjects/StackTrackr/index.html';

    let analysisContext = '';

    // Add CSS content
    if (fs.existsSync(stylesPath)) {
      const cssContent = fs.readFileSync(stylesPath, 'utf8');
      analysisContext += `CSS STYLES (styles.css):\n${cssContent}\n\n`;
    }

    // Add Events content
    if (fs.existsSync(eventsPath)) {
      const eventsContent = fs.readFileSync(eventsPath, 'utf8');
      analysisContext += `JAVASCRIPT EVENTS (events.js):\n${eventsContent}\n\n`;
    }

    // Add Inventory content (first 2000 chars to avoid token limits)
    if (fs.existsSync(inventoryPath)) {
      const inventoryContent = fs.readFileSync(inventoryPath, 'utf8').substring(0, 2000);
      analysisContext += `JAVASCRIPT INVENTORY (inventory.js - excerpt):\n${inventoryContent}\n\n`;
    }

    // Add HTML content
    if (fs.existsSync(htmlPath)) {
      const htmlContent = fs.readFileSync(htmlPath, 'utf8');
      analysisContext += `HTML STRUCTURE (index.html):\n${htmlContent}\n\n`;
    }

    const prompt = `COLLECT BUTTON TOGGLE ANALYSIS REQUEST

PROBLEM: StackTrackr has collect button toggles that don't visually match their actual state. The user suspects semi-transparent overlays or object-related issues rather than table colors.

ANALYSIS CONTEXT:
${analysisContext}

SPECIFIC ISSUES TO INVESTIGATE:
1. Semi-transparent button overlays that might mask the true button state
2. CSS specificity conflicts affecting button appearance
3. Toggle state synchronization between JavaScript and CSS
4. Hidden elements or pseudo-elements affecting visual feedback
5. Color inheritance or override issues
6. Button object properties vs visual appearance mismatches

ANALYSIS REQUIREMENTS:
- Identify specific code causing visual/functional mismatch
- Look for overlay elements or semi-transparent layers
- Check CSS selector specificity conflicts
- Examine JavaScript state management for toggles
- Provide actionable code fixes with line numbers where possible
- Focus on collect button behavior specifically

Please provide a comprehensive technical analysis with specific code references and recommended solutions.`;

    console.log('üîç Analyzing collect button toggle issue...');
    
    const result = await model.generateContent(prompt);
    const analysis = result.response.text();
    
    // Save analysis to file
    const outputPath = '/Volumes/DATA/GitHub/rEngine/collect_button_analysis_report.md';
    const report = `# StackTrackr Collect Button Toggle Analysis Report
Generated: ${new Date().toISOString()}

## Problem Description
Collect button toggles don't visually match their actual state. Suspected issues with semi-transparent overlays or object-related problems.

## Gemini Analysis

${analysis}

## Next Steps
1. Review the analysis above
2. Implement recommended fixes
3. Test button toggle behavior
4. Verify visual state matches functional state

---
*Analysis generated by Gemini via heygemini script*
`;
    
    fs.writeFileSync(outputPath, report);
    console.log(`‚úÖ Analysis complete! Report saved to: ${outputPath}`);
    
  } catch (error) {
    console.error('‚ùå Analysis failed:', error.message);
    
    // Save error report
    const errorReport = `# Collect Button Analysis - Error Report
Generated: ${new Date().toISOString()}

## Error
${error.message}

## Problem Description
Collect button toggles don't visually match their actual state. 

## Manual Investigation Needed
1. Check CSS for semi-transparent overlays on collect buttons
2. Review button state management in JavaScript
3. Look for CSS specificity conflicts
4. Examine toggle synchronization between JS and CSS
5. Check for hidden elements affecting button appearance

## Files to Review
- /rProjects/StackTrackr/css/styles.css
- /rProjects/StackTrackr/js/events.js
- /rProjects/StackTrackr/js/inventory.js
- /rProjects/StackTrackr/index.html
`;
    
    fs.writeFileSync('/Volumes/DATA/GitHub/rEngine/collect_button_analysis_error.md', errorReport);
  }
}

analyzeCollectButtons();
