#!/usr/bin/env node

/**
 * Test Document Sweep Log Monitoring
 * Creates sample log entries to test the parsing functionality
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const baseDir = path.dirname(__dirname);
const testLogPath = path.join(baseDir, 'logs', 'document-sweep.log');

// Sample log entries that would be generated by document-sweep.js
const sampleLogEntries = [
    '🚀 Starting document sweep...',
    '📄 Generating docs for: rEngine/smart-scribe.js',
    '✅ Success: smart-scribe.js',
    '📄 Generating docs for: js/app.js', 
    '✅ Success: app.js',
    '📊 Diff saved: app_2025-08-17T23-45-00-123Z.diff',
    '🎉 DOCUMENT SWEEP COMPLETE',
    '═══════════════════════════',
    '📊 Total files processed: 195',
    '✅ Successfully generated: 190',
    '❌ Failed: 5',
    '📈 Success rate: 97.4%',
    '⏱️  Duration: 120.5s',
    '🔄 Documentation updates: 25',
    '📊 Diffs generated: 25',
    '🧠 Powered by: Gemini 1.5 Pro API'
];

async function createTestLog() {
    try {
        // Ensure logs directory exists
        await fs.mkdir(path.dirname(testLogPath), { recursive: true });
        
        console.log('📝 Creating test document sweep log...');
        
        // Write sample entries with delays to simulate real-time logging
        for (let i = 0; i < sampleLogEntries.length; i++) {
            const entry = sampleLogEntries[i];
            const timestamp = new Date().toISOString();
            const logLine = `${timestamp} | ${entry}\n`;
            
            await fs.appendFile(testLogPath, logLine);
            console.log(`✅ Added: ${entry}`);
            
            // Small delay between entries
            await new Promise(resolve => setTimeout(resolve, 200));
        }
        
        console.log(`\n📊 Test log created at: ${testLogPath}`);
        console.log('🔍 The Split Scribe Console should now detect and parse these entries!');
        
    } catch (error) {
        console.error('❌ Error creating test log:', error.message);
    }
}

// Run the test
createTestLog();
