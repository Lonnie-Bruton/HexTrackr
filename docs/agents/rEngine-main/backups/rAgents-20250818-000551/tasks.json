{
  "metadata": {
    "version": "1.0",
    "created": "2025-08-16",
    "purpose": "Unified task management and project coordination for StackTrackr agentic system",
    "description": "Complete task lifecycle management with dependencies, progress tracking, and automated coordination",
    "mcp_fallback": "Agents can operate without MCP by reading this file directly for complete task context",
    "last_updated": "2025-08-16T23:35:55Z",
    "zip_prep_sync": true,
    "gpt_export_prep": true,
    "goomba_export_prep": true
  },
  "active_projects": {
    "performance_optimization": {
      "project_id": "perf_opt_2025_08",
      "title": "StackTrackr Performance Optimization",
      "description": "Comprehensive performance improvements for table rendering, search, and memory usage",
      "status": "active",
      "priority": "high",
      "estimated_total_time": "100_minutes",
      "started": "2025-08-13",
      "target_completion": "2025-08-20",
      "lead_coordinator": "human",
      "success_criteria": [
        "30%+ improvement in table rendering performance",
        "Search responsiveness under 200ms",
        "Memory leak elimination in charts",
        "No regressions in existing functionality"
      ],
      "phases": {
        "phase_1": {
          "title": "Search Debouncing",
          "agent": "gpt_4",
          "estimated_time": "15_minutes",
          "status": "pending",
          "priority": "critical_path",
          "dependencies": [],
          "blocks": [
            "phase_2",
            "phase_3"
          ],
          "files_affected": [
            "js/utils.js",
            "js/events.js"
          ],
          "success_criteria": [
            "No search lag with large inventories",
            "Debouncing working properly"
          ],
          "testing_requirements": [
            "Test with 1000+ items",
            "Verify search responsiveness"
          ],
          "rollback_procedure": "Revert debounce implementation, restore direct event handlers"
        },
        "phase_2": {
          "title": "Event Delegation",
          "agent": "claude_sonnet",
          "estimated_time": "20_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": [
            "phase_1"
          ],
          "blocks": [
            "phase_4"
          ],
          "files_affected": [
            "js/inventory.js",
            "js/events.js"
          ],
          "success_criteria": [
            "All table interactions work",
            "Memory leaks eliminated"
          ],
          "testing_requirements": [
            "Test all table interactions",
            "Memory usage monitoring"
          ],
          "rollback_procedure": "Restore individual event handlers, verify functionality"
        },
        "phase_3": {
          "title": "LocalStorage Batching",
          "agent": "gpt_4",
          "estimated_time": "10_minutes",
          "status": "waiting",
          "priority": "medium",
          "dependencies": [
            "phase_1"
          ],
          "blocks": [],
          "files_affected": [
            "js/inventory.js",
            "js/utils.js"
          ],
          "success_criteria": [
            "Rapid edits work smoothly",
            "I/O operations optimized"
          ],
          "testing_requirements": [
            "Test rapid editing scenarios",
            "Storage performance validation"
          ],
          "rollback_procedure": "Revert to immediate localStorage writes"
        },
        "phase_4": {
          "title": "DOM Fragment Optimization",
          "agent": "claude_sonnet",
          "estimated_time": "30_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": [
            "phase_1",
            "phase_2",
            "phase_3"
          ],
          "blocks": [],
          "files_affected": [
            "js/inventory.js"
          ],
          "success_criteria": [
            "Table rendering performance improved",
            "30%+ performance gain achieved"
          ],
          "testing_requirements": [
            "Performance benchmarking",
            "Large dataset testing"
          ],
          "rollback_procedure": "Revert to individual DOM insertions"
        },
        "phase_5": {
          "title": "Chart Cleanup",
          "agent": "gemini_pro",
          "estimated_time": "10_minutes",
          "status": "pending",
          "priority": "medium",
          "dependencies": [],
          "blocks": [],
          "files_affected": [
            "js/charts.js",
            "js/detailsModal.js"
          ],
          "success_criteria": [
            "Memory leaks eliminated in modals",
            "Chart cleanup working"
          ],
          "testing_requirements": [
            "Memory leak detection",
            "Chart lifecycle testing"
          ],
          "rollback_procedure": "Restore previous chart handling"
        },
        "phase_6": {
          "title": "Testing & Validation",
          "agent": "gemini_pro",
          "estimated_time": "15_minutes",
          "status": "waiting",
          "priority": "critical",
          "dependencies": [
            "phase_1",
            "phase_2",
            "phase_3",
            "phase_4",
            "phase_5"
          ],
          "blocks": [],
          "files_affected": [
            "all_modified_files"
          ],
          "success_criteria": [
            "All functionality verified",
            "Performance improvements confirmed"
          ],
          "testing_requirements": [
            "Comprehensive functionality testing",
            "Performance validation"
          ],
          "rollback_procedure": "System-wide rollback if major issues detected"
        }
      }
    },
    "table_audit_project": {
      "project_id": "table_audit_2025_08_16",
      "title": "Comprehensive Table and Collect Button Audit",
      "description": "Complete documentation and analysis of inventory table functionality, with special focus on collect button behavior and table row hover styling issues",
      "status": "assigned",
      "priority": "medium",
      "estimated_total_time": "45_minutes",
      "created": "2025-08-16",
      "target_completion": "2025-08-17",
      "lead_coordinator": "human",
      "urgent_issue": {
        "title": "Table Row Hover Styling Bug",
        "description": "When hovering over table rows, the hover effect is causing visual artifacts and style changes in other rows. Screenshots show alternating row styling being disrupted during hover interactions.",
        "priority": "high",
        "evidence": "User provided screenshots showing hover state corruption across table rows",
        "affected_area": "Table row CSS hover states and zebra striping"
      },
      "success_criteria": [
        "Complete documentation of all table functions and their dependencies",
        "Detailed analysis of collect button functionality and edge cases",
        "Performance audit of table rendering with large datasets (1319+ items)",
        "Documentation of all column types, filters, and interactive elements",
        "Identification of any bugs or improvement opportunities"
      ],
      "phases": {
        "phase_1": {
          "title": "URGENT: Table Hover Styling Bug Fix",
          "agent": "claude_3_5_sonnet",
          "estimated_time": "15_minutes",
          "status": "assigned",
          "priority": "critical",
          "dependencies": [],
          "blocks": [],
          "files_affected": [
            "css/styles.css",
            "js/inventory.js",
            "index.html"
          ],
          "success_criteria": [
            "Table row hover effects work properly without affecting other rows",
            "Zebra striping maintained during hover states",
            "No visual artifacts on hover"
          ],
          "testing_requirements": [
            "Hover interaction testing",
            "Cross-browser validation",
            "Large dataset testing"
          ],
          "rollback_procedure": "Revert CSS hover state changes",
          "issue_details": {
            "symptoms": "Hovering over table rows causes style changes in other rows",
            "evidence": "User screenshots showing hover state corruption",
            "likely_cause": "CSS specificity conflicts between hover states and zebra striping"
          }
        },
        "phase_2": {
          "title": "Table Function Documentation",
          "agent": "claude_3_5_sonnet",
          "estimated_time": "15_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": [
            "phase_1"
          ],
          "blocks": [],
          "files_affected": [
            "js/inventory.js",
            "js/events.js",
            "js/search.js",
            "js/filters.js"
          ],
          "success_criteria": [
            "All table rendering functions documented",
            "Dependencies mapped",
            "Performance bottlenecks identified"
          ],
          "testing_requirements": [
            "Function coverage analysis",
            "Dependency validation"
          ],
          "rollback_procedure": "N/A - documentation only"
        },
        "phase_3": {
          "title": "Collect Button Analysis",
          "agent": "claude_3_5_sonnet",
          "estimated_time": "10_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": [
            "phase_2"
          ],
          "blocks": [],
          "files_affected": [
            "js/inventory.js",
            "js/events.js"
          ],
          "success_criteria": [
            "Collect button functionality fully documented",
            "Edge cases identified",
            "UI/UX improvements suggested"
          ],
          "testing_requirements": [
            "Interactive testing",
            "State change validation"
          ],
          "rollback_procedure": "N/A - analysis only"
        },
        "phase_4": {
          "title": "Performance and Improvement Recommendations",
          "agent": "claude_3_5_sonnet",
          "estimated_time": "5_minutes",
          "status": "waiting",
          "priority": "medium",
          "dependencies": [
            "phase_2",
            "phase_3"
          ],
          "blocks": [],
          "files_affected": [
            "all_table_related_files"
          ],
          "success_criteria": [
            "Performance benchmarks documented",
            "Improvement recommendations provided",
            "Implementation roadmap created"
          ],
          "testing_requirements": [
            "Performance testing with large datasets",
            "Memory usage analysis"
          ],
          "rollback_procedure": "N/A - recommendations only"
        }
      },
      "agent_assignments": {
        "primary": "claude_3_5_sonnet",
        "documentation": "claude_3_5_sonnet",
        "analysis": "claude_3_5_sonnet"
      }
    },
    "comprehensive_code_audit": {
      "project_id": "code_audit_2025_08_16",
      "title": "Complete Codebase Analysis & Function Dependency Roadmap",
      "description": "Comprehensive audit of ALL JavaScript, CSS, and HTML files with complete function dependency mapping and interaction analysis across entire StackTrackr application",
      "status": "ready",
      "priority": "high",
      "estimated_total_time": "120_minutes",
      "created": "2025-08-16",
      "target_completion": "2025-08-16",
      "lead_coordinator": "human",
      "assigned_agent": "claude_sonnet",
      "scope": {
        "javascript_files": 32,
        "css_files": 1,
        "html_files": 3,
        "total_files": 36,
        "analysis_depth": "complete_function_dependency_mapping"
      },
      "success_criteria": [
        "100% function coverage across ALL 32 JavaScript files",
        "Complete CSS selector and style dependency mapping",
        "Full HTML structure and DOM interaction documentation",
        "Cross-file function call graph with every dependency mapped",
        "Complete interaction flow documentation (user \u2192 function \u2192 function)",
        "All findings categorized in expanded memory system",
        "Performance optimization opportunities identified",
        "Critical path analysis for major application features"
      ],
      "phases": {
        "phase_1": {
          "title": "Core Application Files Analysis",
          "agent": "claude_sonnet",
          "estimated_time": "45_minutes",
          "status": "ready",
          "priority": "high",
          "dependencies": [],
          "blocks": [
            "phase_2"
          ],
          "files_affected": [
            "js/init.js",
            "js/inventory.js",
            "js/api.js",
            "js/charts.js",
            "js/search.js",
            "js/filters.js",
            "js/sorting.js",
            "js/pagination.js",
            "js/state.js",
            "js/events.js",
            "index.html",
            "css/styles.css"
          ],
          "success_criteria": [
            "Every function documented with complete signature",
            "All function dependencies mapped",
            "CSS-JavaScript interactions identified",
            "DOM manipulation points documented"
          ],
          "testing_requirements": [
            "Function call graph validation",
            "Dependency accuracy verification"
          ],
          "rollback_procedure": "N/A - analysis task only"
        },
        "phase_2": {
          "title": "Extended Features & Integrations Analysis",
          "agent": "claude_sonnet",
          "estimated_time": "45_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": [
            "phase_1"
          ],
          "blocks": [
            "phase_3"
          ],
          "files_affected": [
            "js/utils.js",
            "js/theme.js",
            "js/about.js",
            "js/ai-search-prototype.js",
            "js/autocomplete.js",
            "js/catalog-api.js",
            "js/catalog-manager.js",
            "js/catalog-providers.js",
            "js/changeLog.js",
            "js/constants.js",
            "js/customMapping.js",
            "js/debug-log.js",
            "js/debugModal.js",
            "js/detailsModal.js",
            "js/encryption.js",
            "js/file-protocol-fix.js",
            "js/fuzzy-search.js",
            "agents/lab/rsynk-settings.html",
            "agents/lab/ai-search-demo.html"
          ],
          "success_criteria": [
            "All utility and helper functions mapped",
            "Integration points with external services documented",
            "Modal and UI component interactions analyzed",
            "Specialized feature function dependencies traced"
          ],
          "testing_requirements": [
            "Integration pattern validation",
            "Feature interaction verification"
          ],
          "rollback_procedure": "N/A - analysis task only"
        },
        "phase_3": {
          "title": "Advanced Features & Memory System Integration",
          "agent": "claude_sonnet",
          "estimated_time": "30_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": [
            "phase_1",
            "phase_2"
          ],
          "blocks": [],
          "files_affected": [
            "js/numista-modal.js",
            "js/rengine-api-client.js",
            "js/rsynk-integration.js",
            "js/spot.js",
            "js/versionCheck.js",
            "agents/functions.json",
            "agents/structure.json",
            "agents/patterns.json",
            "agents/dependencies.json",
            "agents/interactions.json"
          ],
          "success_criteria": [
            "Complete function dependency graph documented",
            "All findings committed to expanded memory system",
            "Cross-file interaction patterns identified",
            "Performance bottlenecks and optimization opportunities documented",
            "Critical application pathways mapped"
          ],
          "testing_requirements": [
            "Complete dependency graph validation",
            "Memory system integration verification"
          ],
          "rollback_procedure": "Restore previous memory file versions if needed"
        }
      },
      "agent_assignments": {
        "primary": "claude_sonnet",
        "documentation": "claude_sonnet",
        "analysis": "claude_sonnet"
      },
      "deliverables": {
        "complete_function_registry": "Every function in functions.json with full metadata",
        "dependency_graph": "Complete call chain mapping in dependencies.json",
        "interaction_map": "User flow and system interactions in interactions.json",
        "architecture_documentation": "Full system structure in structure.json",
        "performance_analysis": "Optimization recommendations in patterns.json",
        "critical_path_mapping": "Most important function chains identified"
      },
      "expected_outcomes": {
        "optimization_foundation": "Complete baseline for performance improvements",
        "debugging_assistance": "Function dependency knowledge for faster issue resolution",
        "feature_development": "Architectural understanding for new feature integration",
        "refactoring_guidance": "Clear understanding of function relationships for safe refactoring",
        "agent_task_optimization": "Perfect function-to-agent matching for future assignments"
      }
    },
    "database_migration_project": {
      "project_id": "db_migration_2025_08_16",
      "title": "Memory System Database Migration",
      "description": "Hybrid SQLite + JSON export system: SQLite for fast concurrent operations, JSON MemoryBundle exports for reviews/handoffs/LLM collaboration",
      "status": "planned", 
      "priority": "high",
      "estimated_total_time": "120_minutes",
      "created": "2025-08-16T18:55:00Z",
      "target_completion": "2025-08-25",
      "lead_coordinator": "human",
      "business_justification": "Multi-agent system needs: (1) SQLite for concurrent writes, fast queries, auditing (2) JSON exports for human reviews and LLM handoffs",
      "hybrid_architecture": {
        "internal_operations": "SQLite database with ACID transactions",
        "export_interface": "JSON MemoryBundle for reviews, handoffs, and LLM collaboration",
        "best_of_both_worlds": "Performance + safety + human readability + git-friendly diffs"
      },
      "success_criteria": [
        "SQLite handles all internal memory operations (checkout/checkin/queries)",
        "JSON MemoryBundle export preserves human readability for reviews",
        "Performance improvement of 50%+ for multi-agent operations", 
        "Atomic transactions eliminate race conditions completely",
        "Export system produces clean JSON bundles for LLM collaboration",
        "Git diffs remain meaningful on exported JSON",
        "Zero data loss during migration"
      ],
      "risk_assessment": "Medium - Database migration requires careful data preservation and thorough testing",
      "phases": {
        "phase_1": {
          "title": "Database Architecture Design & Research",
          "agent": "github_copilot",
          "estimated_time": "30_minutes",
          "status": "ready",
          "priority": "critical_path",
          "dependencies": [],
          "blocks": [
            "phase_2",
            "phase_3"
          ],
          "deliverables": [
            "SQLite schema design for memory vault",
            "Performance comparison analysis (JSON vs SQLite)",
            "Migration strategy document",
            "Data integrity validation plan"
          ],
          "research_areas": [
            "SQLite performance characteristics for concurrent multi-agent access",
            "Atomic transaction patterns for checkout/checkin operations",  
            "Schema design optimized for decisions, tasks, bugs, roadmap, patterns",
            "Index strategy for common query patterns (by agent, by date, by status)",
            "JSON export strategy for MemoryBundle generation",
            "WAL mode configuration for concurrent reads during operations",
            "Integration with existing memory vault checkout/checkin system"
          ],
          "hybrid_design_requirements": [
            "SQLite as primary storage with optimized schema",
            "JSON export API that produces clean MemoryBundles", 
            "Preserve git diff friendliness in exported JSON",
            "Maintain human readability for reviews and handoffs",
            "LLM-compatible JSON structure for collaboration"
          ],
          "success_criteria": [
            "Complete database schema designed",
            "Migration plan documented and reviewed",
            "Performance expectations quantified",
            "Risk mitigation strategies identified"
          ],
          "files_to_analyze": [
            "agents/schemas/memory-snapshot.json",
            "agents/engine/memory_checkin.py",
            "agents/decisions.json",
            "agents/tasks.json",
            "agents/bugs.json",
            "agents/roadmap.json",
            "agents/patterns.json"
          ],
          "rollback_procedure": "N/A - research and design phase only"
        },
        "phase_2": {
          "title": "SQLite Integration Implementation",
          "agent": "claude_sonnet",
          "estimated_time": "45_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": [
            "phase_1"
          ],
          "blocks": [
            "phase_4"
          ],
          "files_affected": [
            "agents/engine/memory_checkin.py",
            "agents/engine/database_manager.py",
            "agents/engine/sqlite_memory.py",
            "agents/schemas/database_schema.sql"
          ],
          "implementation_requirements": [
            "Create SQLite database manager class",
            "Implement atomic transaction wrapper",
            "Add connection pooling for concurrent access",
            "Create query builder for common operations",
            "Implement database versioning/migration system",
            "Add comprehensive error handling and logging"
          ],
          "success_criteria": [
            "SQLite database operations working",
            "Atomic transactions implemented",
            "Connection pooling functional",
            "Error handling comprehensive",
            "Performance logging in place"
          ],
          "testing_requirements": [
            "Unit tests for all database operations",
            "Concurrent access testing",
            "Transaction rollback testing",
            "Performance benchmarking"
          ],
          "rollback_procedure": "Keep JSON system as fallback, disable SQLite features"
        },
        "phase_3": {
          "title": "Data Migration Script Development",
          "agent": "gpt_4",
          "estimated_time": "20_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": [
            "phase_1"
          ],
          "blocks": [
            "phase_4"
          ],
          "files_affected": [
            "agents/scripts/migrate_to_sqlite.py",
            "agents/scripts/validate_migration.py",
            "agents/scripts/rollback_migration.py"
          ],
          "migration_requirements": [
            "JSON to SQLite data converter",
            "Data integrity validation",
            "Incremental migration support",
            "Backup creation before migration",
            "Rollback capability to JSON",
            "Progress reporting and logging"
          ],
          "success_criteria": [
            "All existing JSON data migrated successfully",
            "Data integrity verified with checksums",
            "Migration can be safely rolled back",
            "No data loss during conversion",
            "Migration performance acceptable"
          ],
          "testing_requirements": [
            "Test with current production data",
            "Test rollback procedures",
            "Validate data consistency",
            "Performance timing validation"
          ],
          "rollback_procedure": "Automated rollback script restores JSON files from backup"
        },
        "phase_4": {
          "title": "Export System Integration",
          "agent": "github_copilot",
          "estimated_time": "15_minutes",
          "status": "waiting",
          "priority": "medium",
          "dependencies": [
            "phase_2",
            "phase_3"
          ],
          "blocks": [
            "phase_5"
          ],
          "files_affected": [
            "agents/scripts/universal_export.sh",
            "agents/engine/memory_checkin.py",
            "agents/scripts/export.sh"
          ],
          "integration_requirements": [
            "Update export scripts to read from SQLite",
            "Maintain JSON export compatibility",
            "Add database status to export metadata",
            "Update memory bundle creation",
            "Preserve existing export API"
          ],
          "success_criteria": [
            "All export formats still work",
            "SQLite data properly exported",
            "Export performance maintained or improved",
            "Backward compatibility preserved"
          ],
          "testing_requirements": [
            "Test all export types (zip, markdown, memory, code, delta)",
            "Verify export content accuracy",
            "Performance comparison with JSON exports"
          ],
          "rollback_procedure": "Revert export scripts to JSON-only mode"
        },
        "phase_5": {
          "title": "Production Deployment & Validation",
          "agent": "human",
          "estimated_time": "10_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": [
            "phase_4"
          ],
          "blocks": [],
          "deployment_steps": [
            "Create full system backup",
            "Run migration script",
            "Validate all data migrated correctly",
            "Test memory vault operations",
            "Test export system functionality",
            "Monitor performance improvements",
            "Document new procedures"
          ],
          "success_criteria": [
            "SQLite system fully operational",
            "All agents can access memory successfully",
            "Export system working perfectly",
            "Performance goals achieved",
            "Zero data loss confirmed"
          ],
          "monitoring_requirements": [
            "Database performance metrics",
            "Memory vault operation success rates",
            "Export system functionality",
            "Multi-agent concurrent access"
          ],
          "rollback_procedure": "Full system rollback to JSON using backup and rollback scripts"
        }
      },
      "technical_notes": {
        "database_choice_rationale": "SQLite chosen for: zero-config, file-based, ACID transactions, excellent performance, wide Python support",
        "performance_expectations": "50-80% improvement in read/write operations, especially with concurrent access",
        "concurrency_strategy": "WAL mode for concurrent reads, exclusive locks for writes, connection pooling",
        "backup_strategy": "File-based SQLite backups + JSON export compatibility maintained",
        "migration_safety": "Multi-stage migration with validation at each step and full rollback capability"
      },
      "dependencies_external": [
        "sqlite3 Python module (built-in)",
        "No additional dependencies required"
      ]
    }
  },
  "task_templates": {
    "performance_optimization": {
      "template_id": "perf_opt_template",
      "description": "Standard template for performance optimization tasks",
      "phases": [
        "analysis_and_measurement",
        "implementation",
        "testing_and_validation"
      ],
      "required_files": [
        "performance.json",
        "functions.json",
        "structure.json"
      ],
      "standard_agents": {
        "analysis": "claude_sonnet",
        "implementation": "gpt_4",
        "testing": "gemini_pro"
      },
      "success_criteria_template": [
        "measurable_performance_improvement",
        "no_functionality_regressions",
        "comprehensive_testing_completed"
      ]
    },
    "bug_fix": {
      "template_id": "bug_fix_template",
      "description": "Standard template for bug fixing tasks",
      "phases": [
        "diagnosis",
        "fix_implementation",
        "verification"
      ],
      "required_files": [
        "errors.json",
        "recentissues.json",
        "functions.json"
      ],
      "standard_agents": {
        "diagnosis": "auto_select_based_on_domain",
        "implementation": "auto_select_based_on_complexity",
        "verification": "gemini_pro"
      },
      "success_criteria_template": [
        "bug_no_longer_reproducible",
        "no_new_regressions_introduced",
        "root_cause_documented"
      ]
    },
    "feature_development": {
      "template_id": "feature_dev_template",
      "description": "Standard template for new feature development",
      "phases": [
        "requirements_analysis",
        "design_and_architecture",
        "implementation",
        "integration_testing"
      ],
      "required_files": [
        "structure.json",
        "decisions.json",
        "functions.json",
        "styles.json"
      ],
      "standard_agents": {
        "analysis": "claude_sonnet",
        "design": "claude_sonnet",
        "implementation": "gpt_4",
        "testing": "gemini_pro"
      },
      "success_criteria_template": [
        "feature_works_as_specified",
        "integrates_cleanly_with_existing_system",
        "documented_and_tested"
      ]
    }
  },
  "dependency_management": {
    "dependency_types": {
      "blocking": "Task cannot start until dependency completes",
      "soft": "Task can start but may need dependency output",
      "informational": "Task benefits from dependency knowledge but not required"
    },
    "resolution_strategies": {
      "sequential": "Execute dependencies in order before starting task",
      "parallel_where_possible": "Execute independent dependencies simultaneously",
      "just_in_time": "Execute dependencies only when their output is needed"
    },
    "conflict_resolution": {
      "resource_conflicts": "Prioritize by task priority and estimated completion time",
      "agent_conflicts": "Use agent specialization and current workload",
      "timeline_conflicts": "Reassess priorities and adjust schedules"
    }
  },
  "progress_tracking": {
    "status_definitions": {
      "pending": "Task defined but not yet started",
      "waiting": "Task ready but blocked by dependencies",
      "assigned": "Task assigned to specific agent",
      "in_progress": "Task actively being worked on",
      "testing": "Task implementation complete, undergoing validation",
      "complete": "Task finished and validated",
      "blocked": "Task cannot proceed due to external factors",
      "cancelled": "Task cancelled or no longer needed"
    },
    "tracking_frequency": {
      "high_priority_tasks": "real_time_updates",
      "medium_priority_tasks": "hourly_updates",
      "low_priority_tasks": "daily_updates"
    },
    "escalation_triggers": {
      "task_overrun": "task_exceeds_150%_of_estimated_time",
      "dependency_delay": "blocking_dependency_delayed_over_4_hours",
      "quality_issues": "task_fails_validation_twice",
      "resource_contention": "agent_unavailable_for_over_2_hours"
    }
  },
  "automation_features": {
    "auto_assignment": {
      "enabled": true,
      "criteria": [
        "agent_specialization",
        "current_workload",
        "historical_performance"
      ],
      "fallback": "manual_assignment_when_automation_confidence_below_80%"
    },
    "dependency_resolution": {
      "enabled": true,
      "auto_start_ready_tasks": true,
      "parallel_execution_optimization": true,
      "dependency_notification": "notify_agents_when_blocking_dependencies_complete"
    },
    "progress_monitoring": {
      "enabled": true,
      "auto_status_updates": "update_based_on_agent_activity_and_file_changes",
      "performance_tracking": "integrate_with_performance.json_metrics",
      "anomaly_detection": "alert_when_tasks_deviate_from_expected_patterns"
    }
  },
  "integration_points": {
    "json_file_integration": {
      "performance.json": "Task timing and efficiency metrics",
      "decisions.json": "Task approach decisions and outcomes",
      "errors.json": "Task-related error tracking and resolution",
      "functions.json": "Functions modified during task execution",
      "recentissues.json": "Task change tracking and rollback procedures"
    },
    "mcp_memory_integration": {
      "task_context_loading": "MCP provides quick access to relevant task information",
      "cross_project_coordination": "Task dependencies across multiple projects",
      "agent_coordination": "Real-time task assignment and progress updates",
      "fallback_mode": "Complete task information available in JSON when MCP unavailable"
    },
    "workflow_integration": {
      "agent_handoffs": "Automated task transition between agents",
      "quality_gates": "Automated validation checkpoints between phases",
      "rollback_triggers": "Automatic rollback when quality thresholds not met",
      "completion_workflows": "Automated cleanup and documentation on task completion"
    }
  },
  "historical_projects": {
    "completed": [],
    "cancelled": [],
    "archived": []
  },
  "metrics_and_analytics": {
    "project_success_rates": {},
    "agent_performance_by_task_type": {},
    "estimation_accuracy": {},
    "dependency_resolution_efficiency": {},
    "automation_effectiveness": {}
  },
  "fallback_protocols": {
    "no_mcp_operation": {
      "context_loading": "Agents read tasks.json directly for complete task context",
      "progress_updates": "Manual JSON file updates with structured format",
      "coordination": "File-based coordination through JSON timestamps and status",
      "handoffs": "Explicit task file updates to signal readiness for next agent"
    },
    "agent_unavailability": {
      "auto_reassignment": "Select alternative agent based on capabilities matrix",
      "task_postponement": "Delay non-critical tasks until preferred agent available",
      "escalation": "Human intervention for critical tasks when no suitable agent available"
    },
    "system_failures": {
      "task_recovery": "Resume from last known good state using JSON file timestamps",
      "rollback_procedures": "Detailed rollback steps for each task phase",
      "data_integrity": "JSON file validation and consistency checking"
    }
  },
  "schema": {
    "task_entry": {
      "task_id": "string - Unique identifier for task",
      "title": "string - Human readable task title",
      "description": "string - Detailed task description",
      "agent": "string - Assigned agent identifier",
      "estimated_time": "string - Estimated completion time",
      "status": "string - Current task status from status_definitions",
      "priority": "string - Task priority level",
      "dependencies": "array - List of task IDs this task depends on",
      "blocks": "array - List of task IDs this task blocks",
      "files_affected": "array - Files that will be modified",
      "success_criteria": "array - Conditions for task completion",
      "testing_requirements": "array - Required validation steps",
      "rollback_procedure": "string - Steps to undo task changes"
    },
    "project_entry": {
      "project_id": "string - Unique project identifier",
      "title": "string - Project title",
      "description": "string - Project description",
      "status": "string - active|completed|cancelled|on_hold",
      "priority": "string - Project priority level",
      "estimated_total_time": "string - Total estimated time",
      "phases": "object - Map of phase IDs to task entries",
      "success_criteria": "array - Overall project success conditions"
    }
  },
  "instructions": {
    "for_agents": "Use this file as the primary source of task information. MCP Memory provides quick lookup, but this file contains the complete task database.",
    "task_management": "Update task status and progress in real-time. Always check dependencies before starting tasks.",
    "coordination": "Use structured handoffs with complete context transfer between agents through JSON updates.",
    "fallback_operation": "When MCP is unavailable, operate entirely from JSON files with manual status updates.",
    "patch_notes": "For completed phases that involve version changes or significant features, create patch notes in /patchnotes folder following format PATCH-[version].[md|ai]"
  }
}