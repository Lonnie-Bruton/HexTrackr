{
  "metadata": {
    "version": "1.0",
    "created": "2025-08-16",
    "purpose": "Codex agent bootstrap integration for seamless web-based workflow continuity",
    "description": "Ensures Codex agents get the same comprehensive platform view as VS Code agents",
    "last_updated": "2025-08-16T18:45:00Z"
  },
  "codex_bootstrap_strategy": {
    "challenge_analysis": {
      "different_environment": "Codex runs in web workspace without COPILOT_INSTRUCTIONS.md file",
      "no_vs_code_context": "Missing VS Code-specific initialization and MCP integration",
      "github_direct_access": "Codex connects directly to GitHub repo, bypassing local workspace",
      "synchronization_critical": "Must ensure Codex has same smart view as VS Code agents"
    },
    "bootstrap_solutions": {
      "github_based_initialization": {
        "primary_entry_point": "AGENTS.md serves as main bootstrap file for all agents",
        "memory_file_access": "All memory files stored in agents/ directory are GitHub-accessible",
        "unified_workflow_reference": "agents/unified-workflow.md provides complete protocols",
        "auto_initialization_checklist": "Built into AGENTS.md for consistent startup"
      },
      "smart_context_delivery": {
        "comprehensive_memory_system": "30+ JSON memory files provide complete platform context",
        "bootstrap_memory_files": [
          "agents/memory.json - central project memory",
          "agents/structure_complete.json - full architectural understanding",
          "agents/dependencies.json - complete function dependency mapping",
          "agents/functions_expanded.json - detailed function registry",
          "agents/interactions.json - user flow understanding"
        ],
        "context_preservation": "All VS Code insights captured in GitHub-accessible JSON files"
      }
    }
  },
  "codex_initialization_protocol": {
    "mandatory_first_step": {
      "repository_sync_check": {
        "action": "ALWAYS ask user about repository sync status first",
        "required_question": "ðŸ”„ Before we start, have you synced your local repository with the latest changes? Please run `git pull origin main` in your local StackTrackr directory to ensure we're working with the most current version.",
        "wait_for_confirmation": "Do not proceed with any work until user confirms sync is complete",
        "explanation": "This prevents conflicts between your local work and my remote changes to the GitHub repository."
      }
    },
    "step_1_agent_identity": {
      "action": "Read AGENTS.md first for bootstrap instructions",
      "memory_file_selection": "Load appropriate agent memory file (agents/[agent]_memories.json)",
      "sync_status_check": "Verify access to all memory files in agents/ directory"
    },
    "step_2_platform_context": {
      "architectural_understanding": "Load agents/structure_complete.json for full system architecture",
      "dependency_mapping": "Read agents/dependencies.json for function relationships",
      "interaction_patterns": "Study agents/interactions.json for user flow context",
      "current_state": "Check agents/tasks.json for active work and priorities"
    },
    "step_3_smart_view_assembly": {
      "combine_contexts": "Merge architectural, functional, and interaction understanding",
      "identify_patterns": "Use agents/patterns.json for learned optimization patterns",
      "error_awareness": "Review agents/errors.json for known issues and solutions",
      "performance_context": "Check agents/performance.json for optimization opportunities"
    },
    "step_4_workflow_synchronization": {
      "read_unified_workflow": "Study agents/unified-workflow.md for complete protocols",
      "understand_handoff_patterns": "Review agents/live_coordination.json for collaboration styles",
      "natural_communication": "Use agents/natural_communication.json for office-partner feel",
      "git_integration": "Follow agents/git_integration.json for branch-aware collaboration"
    }
  },
  "github_accessibility_validation": {
    "all_memory_files_accessible": {
      "agents/memory.json": "âœ… Central project memory",
      "agents/structure_complete.json": "âœ… Complete architectural analysis",
      "agents/dependencies.json": "âœ… Function dependency mapping",
      "agents/functions_expanded.json": "âœ… Detailed function registry",
      "agents/interactions.json": "âœ… User interaction flows",
      "agents/tasks.json": "âœ… Current project status",
      "agents/errors.json": "âœ… Error patterns and solutions",
      "agents/performance.json": "âœ… Performance optimization context",
      "agents/patterns.json": "âœ… Learned optimization patterns",
      "agents/live_coordination.json": "âœ… Real-time coordination system",
      "agents/natural_communication.json": "âœ… Office-partner communication",
      "agents/git_integration.json": "âœ… Branch-aware collaboration",
      "agents/seamless_experience.json": "âœ… Natural workflow patterns"
    },
    "bootstrap_entry_points": {
      "primary": "AGENTS.md - main bootstrap instructions",
      "detailed": "agents/unified-workflow.md - complete workflow protocols",
      "quick_reference": "agents/agents.json - agent capabilities and selection"
    }
  },
  "codex_advantage_optimization": {
    "web_workspace_benefits": {
      "fresh_environment": "Clean slate for each session without local state conflicts",
      "github_direct_sync": "Always working with latest committed state",
      "browser_testing": "Can immediately test changes in web environment",
      "mobile_accessibility": "Work from any device with web access"
    },
    "enhanced_context_delivery": {
      "pre_loaded_intelligence": "All VS Code insights captured in accessible JSON format",
      "pattern_recognition": "Accumulated learning available through memory files",
      "architectural_awareness": "Complete system understanding through structure files",
      "collaboration_continuity": "Natural handoff patterns preserved in coordination files"
    }
  },
  "sync_safety_protocols": {
    "pre_codex_checklist": {
      "commit_current_work": "Ensure all local changes are committed to GitHub",
      "verify_memory_sync": "Confirm all memory files are up-to-date in repository",
      "check_branch_status": "Ensure working on correct branch for task",
      "validate_clean_state": "No uncommitted changes that could cause conflicts"
    },
    "codex_session_preparation": {
      "provide_context_summary": "Brief the Codex agent on current session goals",
      "highlight_priority_areas": "Point out specific memory files most relevant to task",
      "mention_recent_patterns": "Share any fresh insights not yet captured in memory files",
      "establish_handoff_plan": "Define how work will transition back to VS Code environment"
    }
  },
  "implementation_recommendations": {
    "enhanced_agents_md": {
      "add_codex_section": "Specific bootstrap instructions for web-based agents",
      "memory_file_guide": "Quick reference to most important memory files for different tasks",
      "context_assembly_instructions": "Step-by-step guide to building comprehensive platform view"
    },
    "memory_file_optimization": {
      "ensure_github_sync": "All memory files must be committed and accessible",
      "add_quick_summaries": "Include executive summaries in memory files for rapid context loading",
      "cross_reference_links": "Add references between related memory files for navigation"
    },
    "natural_handoff_integration": {
      "codex_friendly_communication": "Adapt natural communication patterns for web environment",
      "session_continuity_markers": "Clear indicators of where VS Code session ended and Codex begins",
      "progress_preservation": "Detailed capture of work state for seamless transitions"
    }
  },
  "validation_checklist": {
    "codex_bootstrap_test": [
      "âœ“ Can Codex agent access AGENTS.md from GitHub?",
      "âœ“ Does Codex ALWAYS ask about repository sync first?",
      "âœ“ Are all memory files readable from web environment?", 
      "âœ“ Does bootstrap process provide same context as VS Code?",
      "âœ“ Can Codex understand current project state and priorities?",
      "âœ“ Are collaboration patterns clear from memory files?",
      "âœ“ Is architectural understanding complete from JSON files?",
      "âœ“ Can Codex identify its role and next steps effectively?"
    ],
    "sync_verification": [
      "âœ“ All local memory files committed to GitHub",
      "âœ“ No uncommitted changes that could cause confusion",
      "âœ“ Branch status clear and appropriate for task",
      "âœ“ Recent insights captured in memory files",
      "âœ“ Handoff context documented for seamless transition"
    ]
  },
  "codex_specific_optimizations": {
    "rapid_context_loading": {
      "priority_memory_files": [
        "agents/tasks.json - immediate priorities",
        "agents/structure_complete.json - system understanding",
        "agents/dependencies.json - function relationships",
        "agents/errors.json - known issues to avoid"
      ],
      "smart_file_reading_order": "Designed for maximum context with minimum file reads"
    },
    "web_environment_advantages": {
      "immediate_testing": "Changes can be tested directly in browser environment",
      "clean_slate_debugging": "Fresh environment helps isolate issues",
      "cross_platform_validation": "Test compatibility across different environments",
      "mobile_workflow_support": "Enable productive work from mobile devices"
    }
  }
}
