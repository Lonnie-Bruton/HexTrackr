{
  "metadata": {
    "version": "1.0",
    "created": "2025-08-16",
    "purpose": "Centralized prompt library for common tasks and quality-of-life improvements",
    "description": "Quick access to frequently used prompts via short aliases - no more retyping paragraphs!",
    "usage": "Reference prompts by alias: 'weekly-cleanup', 'performance-audit', etc.",
    "last_updated": "2025-08-16T19:15:00Z"
  },
  "prompt_aliases": {
    "weekly-cleanup": {
      "category": "maintenance",
      "description": "Weekly code and memory cleanup routine",
      "frequency": "weekly",
      "prompt": "Please perform the weekly cleanup routine:\n\n1. **Memory System Cleanup**:\n   - Review and consolidate duplicate entries in agents/*.json files\n   - Remove outdated timestamps and completed tasks\n   - Update performance metrics and error patterns\n   - Sync memory files and create backup\n\n2. **Code Quality Check**:\n   - Run linting on all JS files\n   - Check for unused functions and variables\n   - Review console.log statements for cleanup\n   - Validate HTML structure and accessibility\n\n3. **Performance Audit**:\n   - Check localStorage usage and cleanup old data\n   - Review function dependencies for optimization opportunities\n   - Monitor memory usage patterns\n   - Update performance baselines\n\n4. **Documentation Updates**:\n   - Update changelog with recent improvements\n   - Refresh README if needed\n   - Ensure agent memory files reflect current state\n\nProvide a summary of what was cleaned up and any issues discovered."
    },
    "nightly-backup": {
      "category": "maintenance", 
      "description": "Automated nightly backup and sync routine",
      "frequency": "daily",
      "prompt": "Execute the nightly backup routine:\n\n1. **Git Operations**:\n   - Commit any pending changes with descriptive message\n   - Push to remote repository\n   - Verify remote sync status\n\n2. **Memory Backup**:\n   - Create timestamped backup of all agents/*.json files\n   - Verify backup integrity\n   - Clean up old backups (keep last 7 days)\n\n3. **System Health Check**:\n   - Validate all memory files for JSON syntax\n   - Check for memory file consistency\n   - Report any anomalies or corruption\n\n4. **Performance Snapshot**:\n   - Capture current performance metrics\n   - Update baseline measurements\n   - Note any significant changes\n\nConfirm backup completion and report any issues."
    },
    "performance-audit": {
      "category": "optimization",
      "description": "Comprehensive performance analysis and optimization recommendations",
      "frequency": "bi-weekly",
      "prompt": "Conduct a comprehensive performance audit of StackTrackr:\n\n1. **Frontend Performance**:\n   - Analyze table rendering performance with large datasets\n   - Check search and filter response times\n   - Review memory usage patterns and potential leaks\n   - Evaluate chart rendering efficiency\n\n2. **Code Efficiency**:\n   - Identify performance bottlenecks in critical functions\n   - Review DOM manipulation patterns\n   - Check for unnecessary re-renders or calculations\n   - Analyze event handler efficiency\n\n3. **Data Management**:\n   - Evaluate localStorage usage and data structure efficiency\n   - Check for redundant data storage\n   - Review backup and restore performance\n   - Analyze API call patterns and caching opportunities\n\n4. **Optimization Recommendations**:\n   - Prioritize improvements by impact vs effort\n   - Suggest specific code changes\n   - Recommend architecture improvements\n   - Identify quick wins for immediate implementation\n\nProvide detailed findings with specific recommendations and estimated performance gains."
    },
    "bug-investigation": {
      "category": "debugging",
      "description": "Systematic bug investigation and root cause analysis",
      "frequency": "as-needed",
      "prompt": "Perform systematic bug investigation:\n\n1. **Issue Analysis**:\n   - Reproduce the reported issue step-by-step\n   - Identify affected components and functions\n   - Determine scope and impact\n   - Check for related issues in error logs\n\n2. **Root Cause Investigation**:\n   - Trace code execution path\n   - Identify potential failure points\n   - Check dependencies and side effects\n   - Review recent changes that might be related\n\n3. **Testing and Validation**:\n   - Create test cases to isolate the issue\n   - Test in different browsers/environments\n   - Verify edge cases and boundary conditions\n   - Document reproduction steps\n\n4. **Solution Development**:\n   - Design fix that addresses root cause\n   - Consider impact on other system components\n   - Plan testing strategy for the fix\n   - Update error prevention patterns\n\nProvide detailed analysis with proposed solution and testing plan."
    },
    "memory-sync": {
      "category": "system",
      "description": "Memory system synchronization and validation",
      "frequency": "as-needed", 
      "prompt": "Synchronize and validate the memory system:\n\n1. **Memory File Validation**:\n   - Check JSON syntax in all agents/*.json files\n   - Validate cross-references between memory files\n   - Ensure timestamp consistency\n   - Verify memory file completeness\n\n2. **Sync Operations**:\n   - Update shared memory index timestamps\n   - Consolidate duplicate information\n   - Resolve conflicts between agent memories\n   - Ensure MCP integration is current\n\n3. **Consistency Checks**:\n   - Verify function registries match actual code\n   - Check that error patterns are up-to-date\n   - Validate performance metrics alignment\n   - Ensure task status reflects reality\n\n4. **Optimization**:\n   - Remove redundant entries\n   - Consolidate related information\n   - Update memory file structure if needed\n   - Improve cross-references and navigation\n\nReport sync status and any inconsistencies found."
    },
    "feature-planning": {
      "category": "development",
      "description": "Structured feature planning and architecture design",
      "frequency": "as-needed",
      "prompt": "Plan and design the requested feature:\n\n1. **Requirements Analysis**:\n   - Break down feature requirements into specific components\n   - Identify user stories and use cases\n   - Define acceptance criteria\n   - Assess technical complexity\n\n2. **Architecture Design**:\n   - Design system integration points\n   - Plan data structures and storage needs\n   - Identify UI/UX considerations\n   - Map dependencies and prerequisites\n\n3. **Implementation Strategy**:\n   - Break into manageable development phases\n   - Identify potential challenges and risks\n   - Plan testing approach\n   - Estimate development effort\n\n4. **Impact Assessment**:\n   - Evaluate effect on existing functionality\n   - Consider performance implications\n   - Plan rollout and migration strategy\n   - Document any breaking changes\n\nProvide comprehensive feature plan with timeline and resource requirements."
    },
    "status-report": {
      "category": "reporting",
      "description": "Generate human-readable status report from structured JSON files",
      "frequency": "as-needed",
      "prompt": "Generate a comprehensive, human-readable status report from our structured JSON tracking system:\n\n## üìã **CONSOLIDATED PROJECT STATUS REPORT**\n\n### üêõ **BUG TRACKER SUMMARY**\nFrom agents/bugs.json:\n- List all active bugs with priority, category, and estimated effort\n- Show recently resolved bugs with resolution summary\n- Highlight any critical or blocking issues\n- Include bug statistics and trends\n\n### üó∫Ô∏è **ROADMAP & MILESTONES**\nFrom agents/roadmap.json:\n- Show active milestones with progress percentages\n- List features in progress vs planned\n- Highlight any at-risk milestones or blocked features\n- Include completion timeline estimates\n\n### ‚úÖ **TASK MANAGEMENT**\nFrom agents/consolidated_tasks.json:\n- Show active tasks by assignee and priority\n- List any blocked tasks with dependencies\n- Highlight overdue or at-risk tasks\n- Include team productivity metrics\n\n### üìä **KEY METRICS**\n- Overall project health score\n- Completion rates and velocity trends\n- Risk assessment and mitigation needs\n- Resource allocation recommendations\n\n### üö® **ACTION ITEMS**\n- Immediate priorities requiring attention\n- Blockers that need resolution\n- Recommendations for next sprint/week\n\nFormat as clean, scannable markdown that gives me the full picture at a glance. Focus on actionable insights and anything requiring immediate attention."
    },
    "code-review": {
      "category": "quality",
      "description": "Comprehensive code review and quality assessment",
      "frequency": "as-needed",
      "prompt": "Conduct thorough code review:\n\n1. **Code Quality Assessment**:\n   - Review coding standards compliance\n   - Check function naming and organization\n   - Evaluate code readability and maintainability\n   - Assess error handling patterns\n\n2. **Architecture Review**:\n   - Validate design patterns usage\n   - Check separation of concerns\n   - Review component dependencies\n   - Assess scalability considerations\n\n3. **Performance Analysis**:\n   - Identify potential performance issues\n   - Review algorithm efficiency\n   - Check for memory leaks or excessive DOM manipulation\n   - Evaluate caching strategies\n\n4. **Security and Best Practices**:\n   - Check for security vulnerabilities\n   - Validate input sanitization\n   - Review data handling practices\n   - Ensure accessibility compliance\n\nProvide detailed feedback with specific improvement recommendations."
    },
    "deployment-prep": {
      "category": "deployment",
      "description": "Pre-deployment checklist and validation",
      "frequency": "before-releases",
      "prompt": "Prepare for deployment:\n\n1. **Code Validation**:\n   - Run all tests and ensure they pass\n   - Validate all functions work as expected\n   - Check cross-browser compatibility\n   - Verify responsive design functionality\n\n2. **Performance Verification**:\n   - Test with large datasets\n   - Verify loading times are acceptable\n   - Check memory usage under stress\n   - Validate API integration stability\n\n3. **Security Check**:\n   - Review data handling and storage\n   - Validate input sanitization\n   - Check for potential vulnerabilities\n   - Ensure privacy compliance\n\n4. **Documentation Updates**:\n   - Update version numbers\n   - Refresh changelog\n   - Update user documentation\n   - Verify setup instructions\n\nConfirm deployment readiness and highlight any remaining issues."
    },
    "agent-coordination": {
      "category": "system",
      "description": "Multi-agent coordination and handoff preparation",
      "frequency": "session-transitions",
      "prompt": "Prepare for agent coordination and handoff:\n\n1. **Current State Documentation**:\n   - Summarize current work and progress\n   - Document any pending issues or blockers\n   - Update task status and priorities\n   - Note recent insights and learnings\n\n2. **Memory System Update**:\n   - Sync current session insights to memory files\n   - Update function registries with recent changes\n   - Document new patterns or optimizations discovered\n   - Ensure error patterns are current\n\n3. **Handoff Preparation**:\n   - Identify optimal next steps for receiving agent\n   - Highlight areas requiring specific expertise\n   - Document context for seamless transition\n   - Prepare natural communication for handoff\n\n4. **Quality Assurance**:\n   - Verify all changes are tested\n   - Ensure no broken functionality\n   - Confirm repository is in clean state\n   - Validate handoff safety\n\nProvide comprehensive handoff package for smooth transition."
    },
    "backlog-review": {
      "category": "planning",
      "description": "Interactive roadmap and backlog review with guided conversation",
      "frequency": "weekly-or-monthly",
      "interactive": true,
      "prompt": "Let's review the StackTrackr roadmap and backlog together:\n\n## üìã **Current Roadmap Overview**\n\n**Phase 1: Core Stability & Performance**\n- Table rendering optimization (DocumentFragment implementation)\n- Search/filter performance improvements\n- Memory leak prevention in charts\n- Error handling enhancement\n\n**Phase 2: User Experience Enhancements**\n- Advanced filtering system\n- Improved data export/import\n- Enhanced backup/restore functionality\n- Mobile responsiveness improvements\n\n**Phase 3: Advanced Features**\n- rEngine AI integration (planned)\n- Advanced analytics and insights\n- Portfolio tracking enhancements\n- API integrations (Numista, spot prices)\n\n**Phase 4: Integration & Ecosystem**\n- rSynk data synchronization\n- Multi-device coordination\n- Cloud backup options\n- Third-party integrations\n\n**Technical Debt & Maintenance**\n- Code refactoring opportunities\n- Documentation updates\n- Testing framework improvements\n- Performance baseline establishment\n\n**Recent Additions & Considerations**\n- Multi-agent collaboration system\n- Natural communication patterns\n- Conflict prevention protocols\n- Memory system optimization\n\n---\n\n**ü§î Does this roadmap look current and aligned with your priorities?**\n\n**Options:**\n- **\"Looks good\"** ‚Üí We'll wrap up the review\n- **\"Needs changes\"** ‚Üí I'll walk through each section with you\n- **\"Add new items\"** ‚Üí We'll discuss new priorities\n- **\"Reorder priorities\"** ‚Üí We'll adjust the sequence\n\n**What would you like to do?**"
    },
    "version-bump": {
      "category": "deployment",
      "description": "Controlled version increment with user approval required",
      "frequency": "release-cycles",
      "approval_required": true,
      "prompt": "Handle version increment with strict approval controls:\n\nüö® **VERSION CONTROL PROTOCOL** üö®\n\n**CRITICAL**: Version changes require explicit user approval and command!\n\n**Supported Commands:**\n- \"bump to next patch\" ‚Üí Increment patch number (x.x.X+1)\n- \"bump to next minor\" ‚Üí Increment minor, reset patch (x.X+1.0) \n- \"bump to next major\" ‚Üí Increment major, reset minor/patch (X+1.0.0)\n- \"bump to next release\" ‚Üí User must specify which type\n\n**Version Bump Process:**\n\n1. **Verify Current Version**:\n   - Check package.json current version\n   - Verify version in constants.js matches\n   - Confirm changelog reflects current version\n   - Check any other version references\n\n2. **Calculate New Version**:\n   - Parse user command for increment type\n   - Calculate new version number\n   - **CONFIRM with user before proceeding**\n   - Wait for explicit approval\n\n3. **Update All Version References**:\n   - Update package.json version field\n   - Update APP_VERSION in js/constants.js\n   - Update any HTML meta tags with version\n   - Update documentation version references\n\n4. **Documentation Updates**:\n   - Add new entry to changelog with date\n   - Update README if version is referenced\n   - Note version in commit message\n   - Tag Git commit with new version\n\n5. **Validation**:\n   - Verify all files show consistent version\n   - Test that application displays new version\n   - Confirm no broken references\n   - Validate version format (semantic versioning)\n\n**SAFETY RULES:**\n- ‚ùå NEVER increment version without explicit user command\n- ‚ùå NEVER assume which increment type user wants\n- ‚ùå NEVER skip validation steps\n- ‚úÖ ALWAYS confirm new version with user before applying\n- ‚úÖ ALWAYS update ALL version references consistently\n- ‚úÖ ALWAYS document changes in changelog\n\n**Example Interaction:**\nUser: \"bump to next patch\"\nAgent: \"Current version is 3.04.92. New patch version will be 3.04.93. Confirm? (y/n)\"\nUser: \"y\"\nAgent: [Proceeds with version update]\n\nProvide confirmation of version update and summary of all files modified."
    },
    "quick-fix": {
      "category": "maintenance",
      "description": "Quick issue resolution and minor improvements",
      "frequency": "as-needed",
      "prompt": "Address the issue with a quick, targeted fix:\n\n1. **Issue Identification**:\n   - Isolate the specific problem\n   - Identify minimum scope for fix\n   - Check for any related issues\n   - Assess fix complexity\n\n2. **Solution Implementation**:\n   - Apply targeted fix with minimal changes\n   - Ensure fix doesn't break existing functionality\n   - Test the specific issue resolution\n   - Verify no side effects introduced\n\n3. **Validation**:\n   - Confirm issue is resolved\n   - Test edge cases related to the fix\n   - Verify performance impact is minimal\n   - Ensure fix is robust\n\n4. **Documentation**:\n   - Update relevant comments if needed\n   - Note fix in appropriate memory files\n   - Document any lessons learned\n   - Update error prevention patterns\n\nProvide confirmation of fix and any follow-up recommendations."
    }
  },
  "usage_instructions": {
    "how_to_use": "Type the alias name (e.g., 'weekly-cleanup') and I'll execute the full prompt",
    "adding_new_prompts": "Add new entries to prompt_aliases with unique alias names",
    "categories": [
      "maintenance - routine system upkeep",
      "optimization - performance and efficiency improvements", 
      "debugging - issue investigation and resolution",
      "system - core system operations and validation",
      "development - feature planning and implementation",
      "quality - code review and standards compliance",
      "deployment - release preparation and validation"
    ],
    "frequency_guide": [
      "daily - routine operations",
      "weekly - regular maintenance",
      "bi-weekly - comprehensive reviews",
      "as-needed - on-demand operations",
      "before-releases - pre-deployment checks",
      "session-transitions - agent handoffs"
    ]
  },
  "quick_reference": {
    "maintenance_prompts": [
      "weekly-cleanup - comprehensive weekly maintenance",
      "nightly-backup - automated backup routine",
      "memory-sync - memory system validation",
      "quick-fix - targeted issue resolution"
    ],
    "planning_prompts": [
      "backlog-review - interactive roadmap and priority review",
      "feature-planning - structured feature design"
    ],
    "development_prompts": [
      "feature-planning - structured feature design",
      "code-review - comprehensive code assessment", 
      "agent-coordination - handoff preparation"
    ],
    "deployment_prompts": [
      "deployment-prep - release readiness check",
      "version-bump - controlled version increment with approval"
    ],
    "analysis_prompts": [
      "performance-audit - comprehensive performance review",
      "bug-investigation - systematic issue analysis",
      "zip-workflow - ChatGPT/GPT5 collaboration workflow"
    ]
  },
  "zip-workflow": {
    "category": "workflow",
    "description": "Prepare project for ChatGPT/GPT5 zip file collaboration",
    "frequency": "as-needed",
    "prompt": "Prepare StackTrackr for ChatGPT/GPT5 zip workflow collaboration:\n\n## üöÄ **ZIP WORKFLOW PREPARATION**\n\n1. **Pre-Zip Preparation**:\n   - Run: `./agents/scripts/prepare_for_zip.sh`\n   - This creates portable script versions and restoration metadata\n   - Updates memory system timestamps\n   - Creates backup of current state\n\n2. **Create Zip File**:\n   - Include: All source code, agents/ directory, documentation\n   - Exclude: node_modules/, .git/ (optional), large backups\n   - The ZIP_INSTRUCTIONS.md file explains the memory system to ChatGPT\n\n3. **Upload to ChatGPT/GPT5**:\n   - Upload zip file\n   - Reference that this project has portable memory in agents/ directory\n   - All previous context and decisions are preserved in JSON files\n\n4. **After Getting Modified Zip**:\n   - Unzip to desired location\n   - Run: `./agents/scripts/restore_from_zip.sh`\n   - This restores permissions and validates integrity\n   - Review git changes and commit if good\n\n## üß† **MEMORY SYSTEM ADVANTAGES**:\n- ChatGPT gets full context from agents/*.json files\n- Previous decisions and patterns preserved\n- Task tracking and bug status maintained\n- Seamless collaboration across platforms\n\n## üîß **TROUBLESHOOTING**:\nIf scripts fail after unzip:\n- Manually run: `chmod +x agents/scripts/*.sh`\n- Use portable versions in agents/zip_prep/\n- Validate JSON files: `python3 -m json.tool agents/memory.json`\n\nThe portable memory system makes ChatGPT collaboration seamless! üéâ"
  },
  "customization_examples": {
    "adding_project_specific_prompt": {
      "alias": "custom-task",
      "category": "project-specific", 
      "description": "Your custom task description",
      "frequency": "as-needed",
      "prompt": "Your detailed prompt text here..."
    },
    "modifying_existing_prompt": "Edit the prompt text in the relevant alias entry",
    "creating_prompt_variations": "Add numbered variations like 'cleanup-light', 'cleanup-deep'"
  }
}
