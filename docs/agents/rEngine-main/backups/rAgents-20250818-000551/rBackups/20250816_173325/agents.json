{
  "metadata": {
    "version": "1.0",
    "created": "2025-08-16",
    "purpose": "Agent capabilities, profiles, and selection system for StackTrackr agentic system",
    "description": "Comprehensive agent management system for optimal task assignment and coordination",
    "mcp_fallback": "Complete agent information available without MCP dependency for autonomous operation"
  },
  "agent_profiles": {
    "gpt_4": {
      "agent_id": "gpt_4",
      "display_name": "GPT-4",
      "category": "builder",
      "subcategory": "general_implementation",
      "specializations": [
        "utilities_and_helpers",
        "basic_implementations", 
        "simple_optimizations",
        "event_handling",
        "straightforward_features"
      ],
      "optimal_task_complexity": "low_to_medium",
      "optimal_time_range": "10_to_25_minutes",
      "risk_tolerance": "low",
      "strengths": [
        "rapid_implementation",
        "clean_code_generation",
        "pattern_following",
        "debugging_simple_issues",
        "form_validation_and_ui_interactions"
      ],
      "limitations": [
        "complex_architectural_decisions",
        "large_scale_refactoring",
        "performance_optimization_analysis",
        "multi_file_coordination"
      ],
      "preferred_file_types": [
        "js/utils.js",
        "js/events.js", 
        "simple_component_files"
      ],
      "collaboration_style": "follows_detailed_specifications",
      "quality_profile": "good_quality_with_moderate_time_investment",
      "fallback_capabilities": "can_handle_most_basic_tasks_independently"
    },
    "gpt_4o": {
      "agent_id": "gpt_4o",
      "display_name": "GPT-4o",
      "category": "builder",
      "subcategory": "advanced_implementation",
      "specializations": [
        "complex_algorithms",
        "advanced_processing",
        "multi_step_features",
        "data_transformation",
        "integration_logic"
      ],
      "optimal_task_complexity": "medium_to_high",
      "optimal_time_range": "20_to_35_minutes",
      "risk_tolerance": "medium",
      "strengths": [
        "complex_logic_implementation",
        "algorithm_optimization",
        "data_processing_pipelines",
        "api_integration",
        "multi_component_coordination"
      ],
      "limitations": [
        "architectural_design",
        "system_wide_impact_analysis",
        "long_term_maintenance_considerations"
      ],
      "preferred_file_types": [
        "js/inventory.js",
        "js/api.js",
        "js/export.js",
        "complex_feature_modules"
      ],
      "collaboration_style": "can_adapt_specifications_and_suggest_improvements",
      "quality_profile": "high_quality_with_longer_development_time",
      "fallback_capabilities": "strong_independent_problem_solving"
    },
    "claude_sonnet": {
      "agent_id": "claude_sonnet",
      "display_name": "Claude Sonnet",
      "category": "architect",
      "subcategory": "system_design",
      "specializations": [
        "code_analysis",
        "medium_refactoring",
        "system_integration",
        "feature_design",
        "performance_optimization",
        "architectural_decisions"
      ],
      "optimal_task_complexity": "medium_to_high",
      "optimal_time_range": "30_to_60_minutes",
      "risk_tolerance": "medium_to_high",
      "strengths": [
        "architectural_analysis",
        "dependency_mapping",
        "impact_assessment",
        "design_pattern_application",
        "cross_component_optimization",
        "comprehensive_documentation"
      ],
      "limitations": [
        "very_rapid_implementation_needs",
        "simple_utility_functions"
      ],
      "preferred_file_types": [
        "js/inventory.js",
        "css/themes.css",
        "architectural_components",
        "multi_file_projects"
      ],
      "collaboration_style": "provides_detailed_analysis_and_reasoning",
      "quality_profile": "excellent_quality_with_thorough_analysis",
      "fallback_capabilities": "excellent_autonomous_decision_making"
    },
    "claude_opus": {
      "agent_id": "claude_opus",
      "display_name": "Claude Opus",
      "category": "architect",
      "subcategory": "strategic_planning",
      "specializations": [
        "major_architecture_changes",
        "complex_optimization",
        "strategic_planning",
        "system_wide_refactoring",
        "performance_analysis",
        "long_term_maintainability"
      ],
      "optimal_task_complexity": "high_to_very_high",
      "optimal_time_range": "45_to_90_minutes",
      "risk_tolerance": "high",
      "strengths": [
        "comprehensive_system_analysis",
        "strategic_decision_making",
        "complex_problem_decomposition",
        "long_term_planning",
        "risk_assessment_and_mitigation",
        "knowledge_synthesis"
      ],
      "limitations": [
        "simple_implementation_tasks",
        "quick_fixes",
        "routine_maintenance"
      ],
      "preferred_file_types": [
        "architectural_overhauls",
        "system_wide_changes",
        "performance_critical_components"
      ],
      "collaboration_style": "strategic_guidance_and_comprehensive_planning",
      "quality_profile": "exceptional_quality_with_extensive_analysis",
      "fallback_capabilities": "superior_independent_strategic_thinking"
    },
    "gemini_pro": {
      "agent_id": "gemini_pro",
      "display_name": "Gemini Pro",
      "category": "validator",
      "subcategory": "quality_assurance",
      "specializations": [
        "testing_and_qa",
        "security_review",
        "memory_management",
        "validation_and_verification",
        "performance_testing",
        "cleanup_and_maintenance"
      ],
      "optimal_task_complexity": "low_to_medium",
      "optimal_time_range": "15_to_30_minutes",
      "risk_tolerance": "low_to_medium",
      "strengths": [
        "comprehensive_testing",
        "edge_case_identification",
        "security_vulnerability_detection",
        "performance_monitoring",
        "code_quality_assessment",
        "documentation_validation"
      ],
      "limitations": [
        "creative_implementation",
        "architectural_design",
        "complex_algorithm_development"
      ],
      "preferred_file_types": [
        "all_files_for_testing",
        "js/charts.js_for_cleanup",
        "validation_and_test_files"
      ],
      "collaboration_style": "thorough_validation_with_detailed_feedback",
      "quality_profile": "excellent_validation_quality_with_efficient_execution",
      "fallback_capabilities": "strong_independent_quality_assessment"
    }
  },
  "capabilities_matrix": {
    "task_type_assignments": {
      "performance_optimization": {
        "analysis": ["claude_sonnet", "claude_opus"],
        "implementation": ["gpt_4o", "claude_sonnet"],
        "testing": ["gemini_pro"],
        "coordination": ["claude_sonnet"]
      },
      "bug_fixes": {
        "diagnosis": ["claude_sonnet", "gpt_4o"],
        "simple_fixes": ["gpt_4"],
        "complex_fixes": ["gpt_4o", "claude_sonnet"],
        "validation": ["gemini_pro"]
      },
      "feature_development": {
        "design": ["claude_sonnet", "claude_opus"],
        "implementation": ["gpt_4", "gpt_4o"],
        "integration": ["claude_sonnet"],
        "testing": ["gemini_pro"]
      },
      "refactoring": {
        "analysis": ["claude_sonnet", "claude_opus"],
        "implementation": ["claude_sonnet"],
        "validation": ["gemini_pro"]
      },
      "maintenance": {
        "cleanup": ["gemini_pro"],
        "documentation": ["claude_sonnet"],
        "optimization": ["claude_sonnet", "claude_opus"]
      }
    },
    "file_type_expertise": {
      "js/utils.js": ["gpt_4", "gpt_4o"],
      "js/inventory.js": ["gpt_4o", "claude_sonnet"],
      "js/charts.js": ["gpt_4o", "gemini_pro"],
      "css/themes.css": ["claude_sonnet"],
      "architectural_files": ["claude_sonnet", "claude_opus"],
      "configuration_files": ["gpt_4", "claude_sonnet"]
    },
    "complexity_handling": {
      "simple_tasks": ["gpt_4"],
      "medium_tasks": ["gpt_4", "gpt_4o", "claude_sonnet", "gemini_pro"],
      "complex_tasks": ["gpt_4o", "claude_sonnet", "claude_opus"],
      "strategic_tasks": ["claude_opus"]
    }
  },
  "selection_criteria": {
    "primary_factors": {
      "task_complexity": {
        "weight": 0.3,
        "mapping": {
          "simple": ["gpt_4"],
          "medium": ["gpt_4", "gpt_4o", "claude_sonnet"],
          "complex": ["gpt_4o", "claude_sonnet"],
          "strategic": ["claude_opus"]
        }
      },
      "task_type": {
        "weight": 0.25,
        "mapping": "use_capabilities_matrix_task_type_assignments"
      },
      "time_constraints": {
        "weight": 0.2,
        "mapping": {
          "urgent": ["gpt_4", "gpt_4o"],
          "normal": ["all_agents"],
          "thorough": ["claude_sonnet", "claude_opus"]
        }
      },
      "quality_requirements": {
        "weight": 0.15,
        "mapping": {
          "basic": ["gpt_4"],
          "high": ["gpt_4o", "claude_sonnet", "gemini_pro"],
          "exceptional": ["claude_opus"]
        }
      },
      "agent_availability": {
        "weight": 0.1,
        "mapping": "check_current_workload_and_availability"
      }
    },
    "selection_algorithm": {
      "step_1": "filter_agents_by_task_type_and_complexity",
      "step_2": "score_agents_based_on_weighted_criteria",
      "step_3": "select_highest_scoring_available_agent",
      "step_4": "fallback_to_secondary_choices_if_primary_unavailable"
    },
    "fallback_strategies": {
      "preferred_agent_unavailable": "select_from_same_category_with_compatible_skills",
      "no_perfect_match": "select_agent_with_highest_relevant_capability_score",
      "all_agents_busy": "queue_task_for_optimal_agent_or_escalate_priority"
    }
  },
  "performance_history": {
    "tracking_metrics": {
      "task_completion_time": "actual_vs_estimated_time_by_agent_and_task_type",
      "quality_scores": "outcome_quality_ratings_by_agent_and_complexity",
      "rework_frequency": "how_often_agent_work_requires_modification",
      "collaboration_effectiveness": "success_rate_in_multi_agent_scenarios"
    },
    "learning_applications": {
      "estimation_improvement": "refine_time_estimates_based_on_agent_performance_history",
      "assignment_optimization": "adjust_selection_criteria_based_on_success_patterns",
      "capability_evolution": "update_agent_profiles_based_on_demonstrated_abilities"
    }
  },
  "coordination_protocols": {
    "handoff_procedures": {
      "context_transfer": "complete_context_package_with_decisions_made_and_work_completed",
      "quality_gates": "validation_checkpoints_before_agent_transitions",
      "rollback_preparation": "each_agent_prepares_rollback_procedures_for_their_work"
    },
    "collaboration_patterns": {
      "sequential": "structured_handoffs_with_complete_context_transfer",
      "parallel": "independent_work_with_coordination_checkpoints",
      "collaborative": "real_time_coordination_for_complex_shared_tasks"
    },
    "conflict_resolution": {
      "approach_disagreements": "defer_to_agent_with_highest_domain_expertise",
      "quality_disputes": "use_gemini_pro_for_independent_validation",
      "timeline_conflicts": "prioritize_based_on_project_priority_and_dependencies"
    }
  },
  "automation_features": {
    "auto_assignment": {
      "enabled": true,
      "confidence_threshold": 0.8,
      "fallback_to_manual": "when_confidence_below_threshold_or_multiple_equal_scores"
    },
    "workload_balancing": {
      "enabled": true,
      "max_concurrent_tasks_per_agent": 2,
      "priority_override": "high_priority_tasks_can_interrupt_lower_priority_work"
    },
    "performance_optimization": {
      "learning_enabled": true,
      "assignment_refinement": "continuously_improve_selection_based_on_outcomes",
      "capability_updates": "automatically_update_agent_profiles_based_on_performance_data"
    }
  },
  "fallback_protocols": {
    "no_mcp_operation": {
      "agent_selection": "use_static_selection_rules_from_capabilities_matrix",
      "coordination": "file_based_handoffs_with_structured_JSON_updates",
      "performance_tracking": "manual_updates_to_agent_performance_sections"
    },
    "agent_unavailability": {
      "primary_unavailable": "select_secondary_agent_from_same_capability_class",
      "category_unavailable": "cross_train_available_agents_or_delay_task",
      "all_unavailable": "escalate_to_human_intervention"
    },
    "system_degradation": {
      "reduced_functionality": "fall_back_to_manual_agent_assignment",
      "emergency_mode": "use_any_available_agent_with_increased_validation",
      "recovery_procedures": "restore_from_last_known_good_configuration"
    }
  },
  "integration_points": {
    "json_file_integration": {
      "tasks.json": "Agent assignment and task execution tracking",
      "performance.json": "Agent efficiency and optimization metrics",
      "decisions.json": "Agent decision patterns and learning",
      "errors.json": "Agent error patterns and prevention",
      "preferences.json": "User preferences for agent behavior"
    },
    "mcp_memory_integration": {
      "agent_context": "Quick access to agent capabilities and current assignments",
      "performance_lookup": "Real-time agent performance and availability data",
      "selection_assistance": "MCP-assisted optimal agent selection",
      "coordination_support": "Real-time multi-agent coordination"
    }
  },
  "development_evolution": {
    "capability_expansion": {
      "new_agent_integration": "procedures_for_adding_new_agent_types",
      "skill_development": "tracking_and_enhancing_existing_agent_capabilities",
      "specialization_refinement": "continuously_refining_agent_specialization_areas"
    },
    "system_optimization": {
      "selection_algorithm_improvement": "refining_agent_selection_based_on_outcome_data",
      "coordination_enhancement": "improving_multi_agent_collaboration_patterns",
      "performance_optimization": "optimizing_agent_utilization_and_efficiency"
    }
  },
  "schema": {
    "agent_profile": {
      "agent_id": "string - Unique identifier for agent",
      "display_name": "string - Human readable agent name",
      "category": "string - builder|architect|validator",
      "subcategory": "string - Specific role within category",
      "specializations": "array - Areas of expertise",
      "optimal_task_complexity": "string - Complexity level this agent handles best",
      "optimal_time_range": "string - Time range for optimal performance",
      "strengths": "array - Key capabilities and advantages",
      "limitations": "array - Areas where agent is less effective"
    }
  },
  "instructions": {
    "for_system": "Use this file as the primary agent database. MCP provides quick lookup, but complete agent information is here.",
    "agent_selection": "Apply selection criteria systematically, considering task requirements and agent capabilities",
    "fallback_operation": "When MCP unavailable, use static rules and manual coordination through JSON file updates",
    "continuous_improvement": "Update agent profiles and performance data based on actual outcomes"
  }
}