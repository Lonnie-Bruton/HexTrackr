{"type":"entity","name":"test_entity","entityType":"test","observations":["Testing MCP memory integration","Checking if memory persists between sessions"]}
{"type":"entity","entityType":"protocol","name":"stacktrackr_hello_protocol","observations":["When user says 'Hello' in StackTrackr workspace, immediately read COPILOT_INSTRUCTIONS.md and follow startup protocol","Hello is a handoff trigger, not a casual greeting","Prioritize project-specific protocols over general VS Code behavior","Always check for COPILOT_INSTRUCTIONS.md in any new workspace before responding"]}
{"type":"entity","entityType":"system","name":"mcp_fallback_system","observations":["Created mcp-fallback-handler.js that automatically falls back to local JSON memory files when MCP server fails","System can read handoff.json, tasks.json, memory.json and all agent memories from rAgents/ and rMemory/rAgentMemories/ directories","Tested emergency fallback mode - works perfectly for agent continuity","Usage: node mcp-fallback-handler.js [test|search|handoff|emergency] [searchTerm]","Ensures agents can always access critical memory even if MCP server is down"]}
{"type":"entity","entityType":"handoff","name":"daily_session_complete_2025_08_18","observations":["Daily session complete - implemented MCP fallback system for bulletproof agent continuity","Created automated Gemini document sweep running every 12 hours via cron (6 AM/6 PM)","Verified both Ollama Smart Scribe and Gemini Document Generator working perfectly","Git checkpoint d9b180c created with all new systems","Tomorrow priorities: MCP recall integration, console visibility propagation, legacy script archival"]}
{"type":"entity","name":"StackTrackr_Split_Scribe_Console_Terminal_Requirements","entityType":"system_requirement","observations":["The Split Scribe Console MUST launch in the actual Terminal.app, NOT inside VS Code terminal","User expects split scribe console to open in macOS Terminal.app as a separate window","When user says 'relaunch my split screen console' or 'open the console', they mean Terminal.app","Use osascript or open -a Terminal.app commands to launch console in proper terminal","VS Code terminal integration is NOT what the user wants for the split scribe console","The enhanced split scribe console with document sweep monitoring colors should display in Terminal.app","This is a critical user preference that must be remembered by all agents"]}
{"type":"entity","name":"StackTrackr_Console_Launch_Commands","entityType":"command_reference","observations":["Correct launch method: osascript -e 'tell application Terminal to do script cd /path && node split-scribe-console.js'","Alternative method: open -a Terminal.app then manual navigation","NEVER use run_in_terminal tool for interactive console launches","The console should display in a separate Terminal.app window with full color support","User will manually run commands in Terminal.app if automated launch fails","CRITICAL: Always use SHORT commit messages to avoid hanging","Use single line commit messages like 'git commit -m \"Brief description\"'","NEVER use multi-line commit messages - they cause git to hang","Keep commit messages under 50 characters when possible","Multi-paragraph commit messages cause editor hanging issues"]}
{"type":"entity","name":"StackTrackr Project Status","entityType":"project_status","observations":["Document sweep system fully operational with background processing","Split Scribe Console enhanced with color-coded monitoring (yellow/orange for document sweep)","Manual document sweep running in background (PID 99496) processing 199 files","Real-time monitoring set up with tail terminal and error logging to document-sweep-watch.log","JSON parsing error detected during sweep - logged for morning review","All automation ready for 6 AM scheduled run","Terminal.app integration working properly for console systems"]}