#!/bin/bash

# ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
# ‚ñà‚ñà                                                                                                  ‚ñà‚ñà
# ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà           ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà
# ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà           ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà
# ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà           ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà
# ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà           ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà     ‚ñà‚ñà
# ‚ñà‚ñà  ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà     ‚ñà‚ñà
# ‚ñà‚ñà                                                                                                  ‚ñà‚ñà
# ‚ñà‚ñà  ‚ñà‚ñà     ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà            ‚ñà‚ñà
# ‚ñà‚ñà  ‚ñà‚ñà     ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà          ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà     ‚ñà‚ñà  ‚ñà‚ñà             ‚ñà‚ñà
# ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà  ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà              ‚ñà‚ñà
# ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà          ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà       ‚ñà‚ñà               ‚ñà‚ñà
# ‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà       ‚ñà‚ñà               ‚ñà‚ñà
# ‚ñà‚ñà                                                                                                  ‚ñà‚ñà
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
# ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

# rEngine FULL MEMORY WIPE Utility
# Version: 1.0.0
# Purpose: Complete memory reset for new user onboarding
# 
# ‚ö†Ô∏è  WARNING: THIS SCRIPT WILL PERMANENTLY DELETE ALL AI MEMORIES AND USER DATA!
# 
# Use case: Fresh installation for new users who don't want previous memories
# Security: Script is intentionally non-executable by default

set -euo pipefail

# Color codes for dramatic output
RED='\033[0;31m'
BRIGHT_RED='\033[1;91m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Script metadata
SCRIPT_NAME="FULL_MEMORY_WIPE.sh"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PARENT_DIR="$(dirname "$SCRIPT_DIR")"
BACKUP_DIR="${PARENT_DIR}/backups/MEMORY_WIPE_BACKUP_$(date +%Y%m%d_%H%M%S)"
LOG_FILE="${PARENT_DIR}/logs/memory-wipe.log"

# Ensure logs directory exists
mkdir -p "${PARENT_DIR}/logs"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] MEMORY_WIPE: $1" | tee -a "$LOG_FILE"
}

# Print functions with dramatic effect
print_danger() {
    echo ""
    echo -e "${BRIGHT_RED}${BOLD}‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è  DANGER  ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è${NC}"
    echo -e "${RED}$1${NC}"
    echo -e "${BRIGHT_RED}${BOLD}‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è  DANGER  ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è${NC}"
    echo ""
    log "DANGER: $1"
}

print_warning() {
    echo -e "${YELLOW}${BOLD}üö® WARNING: $1${NC}"
    log "WARNING: $1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    log "INFO: $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    log "SUCCESS: $1"
}

print_error() {
    echo -e "${RED}‚ùå ERROR: $1${NC}"
    log "ERROR: $1"
}

# Dramatic header
show_dramatic_warning() {
    clear
    echo ""
    echo -e "${BRIGHT_RED}${BOLD}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"
    echo "‚ñà‚ñà                                                                            ‚ñà‚ñà"
    echo "‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà           ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà      ‚ñà‚ñà"
    echo "‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà           ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà"
    echo "‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà           ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà"
    echo "‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà           ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà"
    echo "‚ñà‚ñà  ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà"
    echo "‚ñà‚ñà                                                                            ‚ñà‚ñà"
    echo "‚ñà‚ñà  ‚ñà‚ñà     ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà         ‚ñà‚ñà"
    echo "‚ñà‚ñà  ‚ñà‚ñà     ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà          ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà         ‚ñà‚ñà"
    echo "‚ñà‚ñà  ‚ñà‚ñà  ‚ñà  ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà         ‚ñà‚ñà"
    echo "‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà          ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà         ‚ñà‚ñà"
    echo "‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà         ‚ñà‚ñà"
    echo "‚ñà‚ñà                                                                            ‚ñà‚ñà"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"
    echo -e "${NC}"
    echo ""
    echo -e "${RED}${BOLD}‚ö†Ô∏è  THIS SCRIPT WILL PERMANENTLY DELETE ALL AI MEMORIES AND USER DATA!${NC}"
    echo ""
    echo -e "${WHITE}Purpose: Fresh rEngine installation for new users${NC}"
    echo -e "${WHITE}Use case: When onboarding someone who doesn't want previous memories${NC}"
    echo ""
    print_danger "ALL CONVERSATIONS, LEARNING, AND MEMORIES WILL BE LOST FOREVER!"
    echo ""
}

# What gets deleted
show_deletion_list() {
    echo -e "${YELLOW}${BOLD}üóëÔ∏è  THE FOLLOWING WILL BE PERMANENTLY DELETED:${NC}"
    echo ""
    echo -e "${RED}AI Memory Systems:${NC}"
    echo "  ‚Ä¢ rMemory/ - All AI conversations and learning"
    echo "  ‚Ä¢ memory-backups/ - Previous memory backups"
    echo "  ‚Ä¢ persistent-memory.json - Core memory data"
    echo "  ‚Ä¢ memory-consolidation-report.json - Memory analysis"
    echo "  ‚Ä¢ agents/memory - Agent-specific memories"
    echo ""
    echo -e "${RED}User Data:${NC}"
    echo "  ‚Ä¢ rAgents/ - All agent configurations and data"
    echo "  ‚Ä¢ rProjects/ - User projects (StackTrackr, HexTrackr, etc.)"
    echo "  ‚Ä¢ rScribe/ - Scribe conversation history"
    echo "  ‚Ä¢ logs/ - All system logs and activity"
    echo ""
    echo -e "${RED}External Storage:${NC}"
    echo "  ‚Ä¢ ~/.rengine/mobile-scribe/ - Mobile app data"
    echo "  ‚Ä¢ ~/.rengine/secrets/api-keys.env - API keys (WILL NEED RECONFIGURATION)"
    echo ""
    echo -e "${GREEN}${BOLD}‚úÖ PRESERVED (Configuration only):${NC}"
    echo "  ‚Ä¢ Docker Compose configurations"
    echo "  ‚Ä¢ VS Code settings"
    echo "  ‚Ä¢ Scripts and templates"
    echo "  ‚Ä¢ Documentation"
    echo ""
}

# Safety checks
perform_safety_checks() {
    print_info "Performing safety checks..."
    
    # Check if we're in the right directory
    if [[ ! -f "${PARENT_DIR}/docker-compose-enhanced.yml" ]]; then
        print_error "Not in rEngine directory! Aborting for safety."
        exit 1
    fi
    
    # Check if this is actually the unsafe directory
    if [[ "$(basename "$SCRIPT_DIR")" != "unsafe" ]]; then
        print_error "Script not in 'unsafe' directory! Security violation."
        exit 1
    fi
    
    # Verify script permissions (should be non-executable initially)
    if [[ -x "$0" ]] && [[ ! -f "${PARENT_DIR}/.memory-wipe-unlocked" ]]; then
        print_warning "Script has execute permissions but not unlocked."
        print_info "To unlock this script, first run:"
        echo -e "${CYAN}  touch ${PARENT_DIR}/.memory-wipe-unlocked${NC}"
        echo -e "${CYAN}  chmod +x $0${NC}"
        echo -e "${CYAN}  ./unsafe/$(basename "$0")${NC}"
        exit 1
    fi
    
    print_success "Safety checks passed"
}

# Create backup before deletion
create_final_backup() {
    print_info "Creating final backup before memory wipe..."
    
    mkdir -p "$BACKUP_DIR"
    
    # List of everything that will be deleted
    local items_to_backup=(
        "rMemory"
        "memory-backups"
        "persistent-memory.json"
        "memory-consolidation-report.json"
        "agents/memory"
        "rAgents"
        "rProjects"
        "rScribe"
        "logs"
    )
    
    for item in "${items_to_backup[@]}"; do
        if [[ -e "${PARENT_DIR}/${item}" ]]; then
            cp -r "${PARENT_DIR}/${item}" "$BACKUP_DIR/" 2>/dev/null || true
            print_success "Backed up: $item"
        fi
    done
    
    # Backup external storage
    if [[ -d "$HOME/.rengine" ]]; then
        mkdir -p "${BACKUP_DIR}/external-storage"
        cp -r "$HOME/.rengine" "${BACKUP_DIR}/external-storage/" 2>/dev/null || true
        print_success "Backed up: ~/.rengine"
    fi
    
    # Create manifest
    cat > "${BACKUP_DIR}/FINAL_BACKUP_MANIFEST.txt" << EOF
üóëÔ∏è rEngine FULL MEMORY WIPE - Final Backup
Created: $(date)
Source: ${PARENT_DIR}
Backup Directory: ${BACKUP_DIR}

‚ö†Ô∏è  THIS IS THE FINAL BACKUP BEFORE COMPLETE MEMORY DELETION!

Backed Up Items:
$(ls -la "$BACKUP_DIR")

To restore any of this data later:
1. Copy items from this backup directory
2. Place them back in the rEngine root directory
3. Run the master installer to rebuild configuration

Original User: $(whoami)
Original System: $(uname -a)
Git State: $(cd "$PARENT_DIR" && git log --oneline -1 2>/dev/null || echo "No git repository")
EOF
    
    print_success "Final backup created at: $BACKUP_DIR"
}

# The actual memory wipe function
execute_memory_wipe() {
    print_info "üóëÔ∏è  Beginning FULL MEMORY WIPE..."
    
    # Stop any running services first
    print_info "Stopping Docker services..."
    cd "$PARENT_DIR"
    docker-compose -f docker-compose-enhanced.yml down 2>/dev/null || true
    
    # Delete memory systems
    print_info "Deleting AI memory systems..."
    rm -rf "rMemory" 2>/dev/null || true
    rm -rf "memory-backups" 2>/dev/null || true
    rm -f "persistent-memory.json" 2>/dev/null || true
    rm -f "memory-consolidation-report.json" 2>/dev/null || true
    rm -rf "agents/memory" 2>/dev/null || true
    
    # Delete user data
    print_info "Deleting user data..."
    rm -rf "rAgents" 2>/dev/null || true
    rm -rf "rProjects" 2>/dev/null || true
    rm -rf "rScribe" 2>/dev/null || true
    rm -rf "logs" 2>/dev/null || true
    
    # Delete external storage
    print_info "Deleting external storage..."
    rm -rf "$HOME/.rengine/mobile-scribe" 2>/dev/null || true
    
    # Clear API keys but leave directory structure
    if [[ -f "$HOME/.rengine/secrets/api-keys.env" ]]; then
        cat > "$HOME/.rengine/secrets/api-keys.env" << 'EOF'
# API keys cleared during memory wipe
# Replace with your actual API keys
OPENAI_API_KEY=your-key-here
ANTHROPIC_API_KEY=your-key-here
GOOGLE_AI_API_KEY=your-key-here
GROQ_API_KEY=your-key-here
EOF
        print_success "API keys cleared (template recreated)"
    fi
    
    # Recreate essential directories
    mkdir -p "rMemory"
    mkdir -p "memory-backups"
    mkdir -p "rAgents"
    mkdir -p "rProjects"
    mkdir -p "rScribe"
    mkdir -p "logs"
    mkdir -p "agents/memory"
    
    # Create fresh memory files
    echo "{}" > "persistent-memory.json"
    
    # Create wipe completion marker
    cat > "logs/memory-wipe-complete.log" << EOF
üóëÔ∏è FULL MEMORY WIPE COMPLETED
Date: $(date)
Performed by: $(whoami)
Backup location: ${BACKUP_DIR}
Original data can be restored from backup if needed.

Fresh installation ready for new user onboarding.
EOF
    
    print_success "üéâ FULL MEMORY WIPE COMPLETED!"
}

# Confirmation prompts
get_user_confirmation() {
    echo ""
    print_danger "YOU ARE ABOUT TO PERMANENTLY DELETE ALL AI MEMORIES AND USER DATA!"
    echo ""
    echo -e "${WHITE}Final backup will be created at:${NC}"
    echo -e "${CYAN}  $BACKUP_DIR${NC}"
    echo ""
    
    # Multiple confirmation prompts
    echo -e "${RED}Type 'DELETE ALL MEMORIES' (case sensitive) to confirm:${NC}"
    read -r confirm1
    
    if [[ "$confirm1" != "DELETE ALL MEMORIES" ]]; then
        print_info "Confirmation failed. Aborting memory wipe."
        exit 0
    fi
    
    echo ""
    echo -e "${RED}Type 'I UNDERSTAND THIS IS PERMANENT' (case sensitive) to confirm:${NC}"
    read -r confirm2
    
    if [[ "$confirm2" != "I UNDERSTAND THIS IS PERMANENT" ]]; then
        print_info "Confirmation failed. Aborting memory wipe."
        exit 0
    fi
    
    echo ""
    echo -e "${RED}Final confirmation - Type 'WIPE NOW' to proceed:${NC}"
    read -r confirm3
    
    if [[ "$confirm3" != "WIPE NOW" ]]; then
        print_info "Confirmation failed. Aborting memory wipe."
        exit 0
    fi
    
    print_success "All confirmations received. Proceeding with memory wipe..."
}

# Post-wipe instructions
show_completion_message() {
    echo ""
    echo -e "${GREEN}${BOLD}üéâ MEMORY WIPE COMPLETED SUCCESSFULLY!${NC}"
    echo ""
    echo -e "${WHITE}What happens next:${NC}"
    echo ""
    echo -e "${CYAN}1. Fresh Start Ready:${NC}"
    echo "   ‚Ä¢ All AI memories have been cleared"
    echo "   ‚Ä¢ User data has been reset"
    echo "   ‚Ä¢ System is ready for new user onboarding"
    echo ""
    echo -e "${CYAN}2. Configuration Required:${NC}"
    echo "   ‚Ä¢ Set up API keys: ./setup-secure-api-keys.sh"
    echo "   ‚Ä¢ Start services: docker-compose -f docker-compose-enhanced.yml up -d"
    echo ""
    echo -e "${CYAN}3. Backup Available:${NC}"
    echo "   ‚Ä¢ Original data backed up to: ${BACKUP_DIR}"
    echo "   ‚Ä¢ Can be restored if needed"
    echo ""
    echo -e "${YELLOW}4. Security Cleanup:${NC}"
    echo "   ‚Ä¢ Remove unlock file: rm ${PARENT_DIR}/.memory-wipe-unlocked"
    echo "   ‚Ä¢ Make script non-executable: chmod -x $0"
    echo ""
    print_success "rEngine is now ready for a fresh start! üöÄ"
}

# Main function
main() {
    show_dramatic_warning
    show_deletion_list
    perform_safety_checks
    get_user_confirmation
    create_final_backup
    execute_memory_wipe
    show_completion_message
    
    # Clean up unlock file
    rm -f "${PARENT_DIR}/.memory-wipe-unlocked"
    chmod -x "$0"  # Make script non-executable again
}

# Help function
show_help() {
    echo -e "${RED}${BOLD}‚ö†Ô∏è  rEngine FULL MEMORY WIPE Utility${NC}"
    echo ""
    echo "Purpose: Complete memory reset for new user onboarding"
    echo ""
    echo "Usage:"
    echo "  1. Unlock the script:"
    echo "     touch ../.memory-wipe-unlocked"
    echo "     chmod +x $0"
    echo ""
    echo "  2. Run the wipe:"
    echo "     ./$(basename "$0")"
    echo ""
    echo "‚ö†Ô∏è  WARNING: This will permanently delete:"
    echo "     ‚Ä¢ All AI memories and conversations"
    echo "     ‚Ä¢ All user data and projects"
    echo "     ‚Ä¢ All logs and history"
    echo "     ‚Ä¢ External storage data"
    echo ""
    echo "‚úÖ A complete backup will be created before deletion"
    echo ""
}

# Handle command line arguments
case "${1:-}" in
    --help|-h)
        show_help
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac
