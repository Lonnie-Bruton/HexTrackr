{
  "metadata": {
    "version": "1.0",
    "created": "2025-08-16",
    "purpose": "Unified task management and project coordination for StackTrackr agentic system",
    "description": "Complete task lifecycle management with dependencies, progress tracking, and automated coordination",
    "mcp_fallback": "Agents can operate without MCP by reading this file directly for complete task context"
  },
  "active_projects": {
    "performance_optimization": {
      "project_id": "perf_opt_2025_08",
      "title": "StackTrackr Performance Optimization",
      "description": "Comprehensive performance improvements for table rendering, search, and memory usage",
      "status": "active",
      "priority": "high",
      "estimated_total_time": "100_minutes",
      "started": "2025-08-13",
      "target_completion": "2025-08-20",
      "lead_coordinator": "human",
      "success_criteria": [
        "30%+ improvement in table rendering performance",
        "Search responsiveness under 200ms",
        "Memory leak elimination in charts",
        "No regressions in existing functionality"
      ],
      "phases": {
        "phase_1": {
          "title": "Search Debouncing",
          "agent": "gpt_4",
          "estimated_time": "15_minutes",
          "status": "pending",
          "priority": "critical_path",
          "dependencies": [],
          "blocks": ["phase_2", "phase_3"],
          "files_affected": ["js/utils.js", "js/events.js"],
          "success_criteria": ["No search lag with large inventories", "Debouncing working properly"],
          "testing_requirements": ["Test with 1000+ items", "Verify search responsiveness"],
          "rollback_procedure": "Revert debounce implementation, restore direct event handlers"
        },
        "phase_2": {
          "title": "Event Delegation",
          "agent": "claude_sonnet",
          "estimated_time": "20_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": ["phase_1"],
          "blocks": ["phase_4"],
          "files_affected": ["js/inventory.js", "js/events.js"],
          "success_criteria": ["All table interactions work", "Memory leaks eliminated"],
          "testing_requirements": ["Test all table interactions", "Memory usage monitoring"],
          "rollback_procedure": "Restore individual event handlers, verify functionality"
        },
        "phase_3": {
          "title": "LocalStorage Batching",
          "agent": "gpt_4",
          "estimated_time": "10_minutes",
          "status": "waiting",
          "priority": "medium",
          "dependencies": ["phase_1"],
          "blocks": [],
          "files_affected": ["js/inventory.js", "js/utils.js"],
          "success_criteria": ["Rapid edits work smoothly", "I/O operations optimized"],
          "testing_requirements": ["Test rapid editing scenarios", "Storage performance validation"],
          "rollback_procedure": "Revert to immediate localStorage writes"
        },
        "phase_4": {
          "title": "DOM Fragment Optimization",
          "agent": "claude_sonnet",
          "estimated_time": "30_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": ["phase_1", "phase_2", "phase_3"],
          "blocks": [],
          "files_affected": ["js/inventory.js"],
          "success_criteria": ["Table rendering performance improved", "30%+ performance gain achieved"],
          "testing_requirements": ["Performance benchmarking", "Large dataset testing"],
          "rollback_procedure": "Revert to individual DOM insertions"
        },
        "phase_5": {
          "title": "Chart Cleanup",
          "agent": "gemini_pro",
          "estimated_time": "10_minutes",
          "status": "pending",
          "priority": "medium",
          "dependencies": [],
          "blocks": [],
          "files_affected": ["js/charts.js", "js/detailsModal.js"],
          "success_criteria": ["Memory leaks eliminated in modals", "Chart cleanup working"],
          "testing_requirements": ["Memory leak detection", "Chart lifecycle testing"],
          "rollback_procedure": "Restore previous chart handling"
        },
        "phase_6": {
          "title": "Testing & Validation",
          "agent": "gemini_pro",
          "estimated_time": "15_minutes",
          "status": "waiting",
          "priority": "critical",
          "dependencies": ["phase_1", "phase_2", "phase_3", "phase_4", "phase_5"],
          "blocks": [],
          "files_affected": ["all_modified_files"],
          "success_criteria": ["All functionality verified", "Performance improvements confirmed"],
          "testing_requirements": ["Comprehensive functionality testing", "Performance validation"],
          "rollback_procedure": "System-wide rollback if major issues detected"
        }
      }
    },
    "table_audit_project": {
      "project_id": "table_audit_2025_08_16",
      "title": "Comprehensive Table and Collect Button Audit",
      "description": "Complete documentation and analysis of inventory table functionality, with special focus on collect button behavior and table row hover styling issues",
      "status": "assigned",
      "priority": "medium",
      "estimated_total_time": "45_minutes",
      "created": "2025-08-16",
      "target_completion": "2025-08-17",
      "lead_coordinator": "human",
      "urgent_issue": {
        "title": "Table Row Hover Styling Bug",
        "description": "When hovering over table rows, the hover effect is causing visual artifacts and style changes in other rows. Screenshots show alternating row styling being disrupted during hover interactions.",
        "priority": "high",
        "evidence": "User provided screenshots showing hover state corruption across table rows",
        "affected_area": "Table row CSS hover states and zebra striping"
      },
      "success_criteria": [
        "Complete documentation of all table functions and their dependencies",
        "Detailed analysis of collect button functionality and edge cases", 
        "Performance audit of table rendering with large datasets (1319+ items)",
        "Documentation of all column types, filters, and interactive elements",
        "Identification of any bugs or improvement opportunities"
      ],
      "phases": {
        "phase_1": {
          "title": "URGENT: Table Hover Styling Bug Fix",
          "agent": "claude_3_5_sonnet",
          "estimated_time": "15_minutes",
          "status": "assigned",
          "priority": "critical",
          "dependencies": [],
          "blocks": [],
          "files_affected": ["css/styles.css", "js/inventory.js", "index.html"],
          "success_criteria": ["Table row hover effects work properly without affecting other rows", "Zebra striping maintained during hover states", "No visual artifacts on hover"],
          "testing_requirements": ["Hover interaction testing", "Cross-browser validation", "Large dataset testing"],
          "rollback_procedure": "Revert CSS hover state changes",
          "issue_details": {
            "symptoms": "Hovering over table rows causes style changes in other rows",
            "evidence": "User screenshots showing hover state corruption",
            "likely_cause": "CSS specificity conflicts between hover states and zebra striping"
          }
        },
        "phase_2": {
          "title": "Table Function Documentation",
          "agent": "claude_3_5_sonnet",
          "estimated_time": "15_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": ["phase_1"],
          "blocks": [],
          "files_affected": ["js/inventory.js", "js/events.js", "js/search.js", "js/filters.js"],
          "success_criteria": ["All table rendering functions documented", "Dependencies mapped", "Performance bottlenecks identified"],
          "testing_requirements": ["Function coverage analysis", "Dependency validation"],
          "rollback_procedure": "N/A - documentation only"
        },
        "phase_3": {
          "title": "Collect Button Analysis",
          "agent": "claude_3_5_sonnet", 
          "estimated_time": "10_minutes",
          "status": "waiting",
          "priority": "high",
          "dependencies": ["phase_2"],
          "blocks": [],
          "files_affected": ["js/inventory.js", "js/events.js"],
          "success_criteria": ["Collect button functionality fully documented", "Edge cases identified", "UI/UX improvements suggested"],
          "testing_requirements": ["Interactive testing", "State change validation"],
          "rollback_procedure": "N/A - analysis only"
        },
        "phase_4": {
          "title": "Performance and Improvement Recommendations",
          "agent": "claude_3_5_sonnet",
          "estimated_time": "5_minutes", 
          "status": "waiting",
          "priority": "medium",
          "dependencies": ["phase_2", "phase_3"],
          "blocks": [],
          "files_affected": ["all_table_related_files"],
          "success_criteria": ["Performance benchmarks documented", "Improvement recommendations provided", "Implementation roadmap created"],
          "testing_requirements": ["Performance testing with large datasets", "Memory usage analysis"],
          "rollback_procedure": "N/A - recommendations only"
        }
      },
      "agent_assignments": {
        "primary": "claude_3_5_sonnet",
        "documentation": "claude_3_5_sonnet",
        "analysis": "claude_3_5_sonnet"
      }
    }
  },
  "task_templates": {
    "performance_optimization": {
      "template_id": "perf_opt_template",
      "description": "Standard template for performance optimization tasks",
      "phases": [
        "analysis_and_measurement",
        "implementation",
        "testing_and_validation"
      ],
      "required_files": ["performance.json", "functions.json", "structure.json"],
      "standard_agents": {
        "analysis": "claude_sonnet",
        "implementation": "gpt_4",
        "testing": "gemini_pro"
      },
      "success_criteria_template": [
        "measurable_performance_improvement",
        "no_functionality_regressions",
        "comprehensive_testing_completed"
      ]
    },
    "bug_fix": {
      "template_id": "bug_fix_template",
      "description": "Standard template for bug fixing tasks",
      "phases": [
        "diagnosis",
        "fix_implementation",
        "verification"
      ],
      "required_files": ["errors.json", "recentissues.json", "functions.json"],
      "standard_agents": {
        "diagnosis": "auto_select_based_on_domain",
        "implementation": "auto_select_based_on_complexity",
        "verification": "gemini_pro"
      },
      "success_criteria_template": [
        "bug_no_longer_reproducible",
        "no_new_regressions_introduced",
        "root_cause_documented"
      ]
    },
    "feature_development": {
      "template_id": "feature_dev_template",
      "description": "Standard template for new feature development",
      "phases": [
        "requirements_analysis",
        "design_and_architecture",
        "implementation",
        "integration_testing"
      ],
      "required_files": ["structure.json", "decisions.json", "functions.json", "styles.json"],
      "standard_agents": {
        "analysis": "claude_sonnet",
        "design": "claude_sonnet",
        "implementation": "gpt_4",
        "testing": "gemini_pro"
      },
      "success_criteria_template": [
        "feature_works_as_specified",
        "integrates_cleanly_with_existing_system",
        "documented_and_tested"
      ]
    }
  },
  "dependency_management": {
    "dependency_types": {
      "blocking": "Task cannot start until dependency completes",
      "soft": "Task can start but may need dependency output",
      "informational": "Task benefits from dependency knowledge but not required"
    },
    "resolution_strategies": {
      "sequential": "Execute dependencies in order before starting task",
      "parallel_where_possible": "Execute independent dependencies simultaneously",
      "just_in_time": "Execute dependencies only when their output is needed"
    },
    "conflict_resolution": {
      "resource_conflicts": "Prioritize by task priority and estimated completion time",
      "agent_conflicts": "Use agent specialization and current workload",
      "timeline_conflicts": "Reassess priorities and adjust schedules"
    }
  },
  "progress_tracking": {
    "status_definitions": {
      "pending": "Task defined but not yet started",
      "waiting": "Task ready but blocked by dependencies",
      "assigned": "Task assigned to specific agent",
      "in_progress": "Task actively being worked on",
      "testing": "Task implementation complete, undergoing validation",
      "complete": "Task finished and validated",
      "blocked": "Task cannot proceed due to external factors",
      "cancelled": "Task cancelled or no longer needed"
    },
    "tracking_frequency": {
      "high_priority_tasks": "real_time_updates",
      "medium_priority_tasks": "hourly_updates",
      "low_priority_tasks": "daily_updates"
    },
    "escalation_triggers": {
      "task_overrun": "task_exceeds_150%_of_estimated_time",
      "dependency_delay": "blocking_dependency_delayed_over_4_hours",
      "quality_issues": "task_fails_validation_twice",
      "resource_contention": "agent_unavailable_for_over_2_hours"
    }
  },
  "automation_features": {
    "auto_assignment": {
      "enabled": true,
      "criteria": ["agent_specialization", "current_workload", "historical_performance"],
      "fallback": "manual_assignment_when_automation_confidence_below_80%"
    },
    "dependency_resolution": {
      "enabled": true,
      "auto_start_ready_tasks": true,
      "parallel_execution_optimization": true,
      "dependency_notification": "notify_agents_when_blocking_dependencies_complete"
    },
    "progress_monitoring": {
      "enabled": true,
      "auto_status_updates": "update_based_on_agent_activity_and_file_changes",
      "performance_tracking": "integrate_with_performance.json_metrics",
      "anomaly_detection": "alert_when_tasks_deviate_from_expected_patterns"
    }
  },
  "integration_points": {
    "json_file_integration": {
      "performance.json": "Task timing and efficiency metrics",
      "decisions.json": "Task approach decisions and outcomes",
      "errors.json": "Task-related error tracking and resolution",
      "functions.json": "Functions modified during task execution",
      "recentissues.json": "Task change tracking and rollback procedures"
    },
    "mcp_memory_integration": {
      "task_context_loading": "MCP provides quick access to relevant task information",
      "cross_project_coordination": "Task dependencies across multiple projects",
      "agent_coordination": "Real-time task assignment and progress updates",
      "fallback_mode": "Complete task information available in JSON when MCP unavailable"
    },
    "workflow_integration": {
      "agent_handoffs": "Automated task transition between agents",
      "quality_gates": "Automated validation checkpoints between phases",
      "rollback_triggers": "Automatic rollback when quality thresholds not met",
      "completion_workflows": "Automated cleanup and documentation on task completion"
    }
  },
  "historical_projects": {
    "completed": [],
    "cancelled": [],
    "archived": []
  },
  "metrics_and_analytics": {
    "project_success_rates": {},
    "agent_performance_by_task_type": {},
    "estimation_accuracy": {},
    "dependency_resolution_efficiency": {},
    "automation_effectiveness": {}
  },
  "fallback_protocols": {
    "no_mcp_operation": {
      "context_loading": "Agents read tasks.json directly for complete task context",
      "progress_updates": "Manual JSON file updates with structured format",
      "coordination": "File-based coordination through JSON timestamps and status",
      "handoffs": "Explicit task file updates to signal readiness for next agent"
    },
    "agent_unavailability": {
      "auto_reassignment": "Select alternative agent based on capabilities matrix",
      "task_postponement": "Delay non-critical tasks until preferred agent available",
      "escalation": "Human intervention for critical tasks when no suitable agent available"
    },
    "system_failures": {
      "task_recovery": "Resume from last known good state using JSON file timestamps",
      "rollback_procedures": "Detailed rollback steps for each task phase",
      "data_integrity": "JSON file validation and consistency checking"
    }
  },
  "schema": {
    "task_entry": {
      "task_id": "string - Unique identifier for task",
      "title": "string - Human readable task title",
      "description": "string - Detailed task description",
      "agent": "string - Assigned agent identifier",
      "estimated_time": "string - Estimated completion time",
      "status": "string - Current task status from status_definitions",
      "priority": "string - Task priority level",
      "dependencies": "array - List of task IDs this task depends on",
      "blocks": "array - List of task IDs this task blocks",
      "files_affected": "array - Files that will be modified",
      "success_criteria": "array - Conditions for task completion",
      "testing_requirements": "array - Required validation steps",
      "rollback_procedure": "string - Steps to undo task changes"
    },
    "project_entry": {
      "project_id": "string - Unique project identifier",
      "title": "string - Project title",
      "description": "string - Project description",
      "status": "string - active|completed|cancelled|on_hold",
      "priority": "string - Project priority level",
      "estimated_total_time": "string - Total estimated time",
      "phases": "object - Map of phase IDs to task entries",
      "success_criteria": "array - Overall project success conditions"
    }
  },
  "instructions": {
    "for_agents": "Use this file as the primary source of task information. MCP Memory provides quick lookup, but this file contains the complete task database.",
    "task_management": "Update task status and progress in real-time. Always check dependencies before starting tasks.",
    "coordination": "Use structured handoffs with complete context transfer between agents through JSON updates.",
    "fallback_operation": "When MCP is unavailable, operate entirely from JSON files with manual status updates.",
    "patch_notes": "For completed phases that involve version changes or significant features, create patch notes in /patchnotes folder following format PATCH-[version].[md|ai]"
  }
}