{
  "metadata": {
    "version": "1.0",
    "created": "2025-08-16",
    "purpose": "Available tools and capabilities for StackTrackr agentic operating system",
    "description": "Comprehensive registry of tools, extensions, and services available to agents for development tasks",
    "mcp_fallback": "Complete tool information accessible without MCP dependency"
  },
  "development_tools": {
    "code_editors": {
      "vscode": {
        "tool_id": "visual_studio_code",
        "type": "code_editor",
        "availability": "primary",
        "capabilities": [
          "file_editing",
          "debugging",
          "git_integration",
          "extension_ecosystem",
          "terminal_integration"
        ],
        "extensions": {
          "playwright": {
            "name": "Playwright Test Runner",
            "purpose": "Browser automation and testing",
            "capabilities": ["ui_testing", "cross_browser_testing", "screenshot_capture"],
            "usage": "Testing responsive design, form validation, user interactions"
          },
          "copilot": {
            "name": "GitHub Copilot",
            "purpose": "AI code completion and suggestions",
            "capabilities": ["code_generation", "completion", "documentation"],
            "integration": "follows_agents_copilot_instructions_md"
          },
          "live_server": {
            "name": "Live Server",
            "purpose": "Local development server with hot reload",
            "capabilities": ["local_hosting", "auto_refresh", "mobile_testing"],
            "usage": "Testing HTML prototypes and responsive design"
          }
        }
      }
    },
    "browser_automation": {
      "playwright": {
        "tool_id": "playwright_browser_automation",
        "type": "testing_framework",
        "availability": "installed",
        "capabilities": [
          "cross_browser_testing",
          "ui_interaction_simulation",
          "screenshot_capture",
          "performance_monitoring",
          "responsive_design_testing"
        ],
        "supported_browsers": ["chromium", "firefox", "webkit"],
        "use_cases": [
          "header_centering_validation",
          "mobile_responsiveness_testing", 
          "form_interaction_testing",
          "visual_regression_testing"
        ],
        "example_usage": {
          "screenshot_testing": "await page.screenshot({ path: 'rAgents/debug/debug-layout-issue.png' })",
          "responsive_testing": "await page.setViewport({ width: 375, height: 800 })",
          "element_validation": "const element = await page.locator('#element-id')"
        }
      }
    },
    "version_control": {
      "git": {
        "tool_id": "git_version_control",
        "type": "version_control",
        "availability": "system_installed",
        "capabilities": [
          "commit_management",
          "branch_operations",
          "diff_analysis",
          "checkpoint_creation",
          "rollback_procedures"
        ],
        "workflow_integration": {
          "checkpoint_protocol": "git add -A && git commit -m 'Checkpoint before [change]'",
          "rollback_command": "git reset --hard HEAD~1",
          "status_checking": "git status --porcelain"
        }
      }
    }
  },
  "web_technologies": {
    "javascript_runtime": {
      "node_js": {
        "tool_id": "nodejs_runtime",
        "type": "runtime_environment",
        "availability": "system_installed",
        "capabilities": [
          "script_execution",
          "package_management",
          "module_loading",
          "file_system_operations"
        ],
        "package_managers": ["npm", "yarn"],
        "use_cases": [
          "test_script_execution",
          "build_automation",
          "utility_script_running"
        ]
      }
    },
    "python_runtime": {
      "python3": {
        "tool_id": "python3_runtime", 
        "type": "runtime_environment",
        "availability": "system_installed",
        "capabilities": [
          "script_execution",
          "json_processing",
          "file_manipulation",
          "backup_automation"
        ],
        "libraries": {
          "json": "Built-in JSON processing",
          "pathlib": "File path operations",
          "datetime": "Timestamp management",
          "shutil": "File operations"
        },
        "use_cases": [
          "json_backup_system_execution",
          "memory_synchronization",
          "data_processing"
        ]
      }
    }
  },
  "system_tools": {
    "terminal": {
      "bash": {
        "tool_id": "bash_shell",
        "type": "command_shell",
        "availability": "system_default",
        "capabilities": [
          "file_operations",
          "script_execution",
          "system_commands",
          "automation"
        ],
        "common_commands": {
          "file_management": ["ls", "cp", "mv", "mkdir", "rm"],
          "text_processing": ["grep", "sed", "awk", "head", "tail"],
          "permissions": ["chmod", "chown"],
          "process_management": ["ps", "kill", "jobs"]
        }
      }
    },
    "file_system": {
      "finder": {
        "tool_id": "macos_finder",
        "type": "file_manager",
        "availability": "system_default",
        "capabilities": [
          "file_browsing",
          "directory_navigation",
          "file_preview",
          "quick_actions"
        ],
        "integration": "accessible_via_open_command"
      }
    }
  },
  "development_servers": {
    "local_http": {
      "python_server": {
        "tool_id": "python_http_server",
        "type": "development_server",
        "availability": "on_demand",
        "command": "python3 -m http.server 8000",
        "capabilities": [
          "local_file_serving",
          "static_content_hosting",
          "cross_device_testing"
        ],
        "use_cases": [
          "testing_html_prototypes",
          "mobile_device_testing",
          "cross_browser_validation"
        ]
      },
      "vscode_live_server": {
        "tool_id": "vscode_live_server_extension",
        "type": "development_server",
        "availability": "vscode_extension",
        "capabilities": [
          "auto_refresh",
          "hot_reload",
          "mobile_debugging",
          "port_forwarding"
        ]
      }
    }
  },
  "debugging_tools": {
    "browser_devtools": {
      "chrome_devtools": {
        "tool_id": "chrome_developer_tools",
        "type": "browser_debugging",
        "availability": "browser_built_in",
        "capabilities": [
          "dom_inspection",
          "css_debugging",
          "javascript_debugging",
          "performance_profiling",
          "network_monitoring"
        ],
        "use_cases": [
          "css_layout_debugging",
          "javascript_error_diagnosis",
          "performance_bottleneck_identification",
          "responsive_design_testing"
        ]
      }
    },
    "logging": {
      "console_api": {
        "tool_id": "browser_console_api",
        "type": "logging_system",
        "availability": "javascript_built_in",
        "capabilities": [
          "error_logging",
          "debug_output",
          "performance_timing",
          "object_inspection"
        ],
        "methods": ["console.log", "console.error", "console.warn", "console.time"]
      }
    }
  },
  "testing_frameworks": {
    "unit_testing": {
      "nodejs_assert": {
        "tool_id": "nodejs_assert_module",
        "type": "testing_framework",
        "availability": "nodejs_built_in",
        "capabilities": [
          "assertion_testing",
          "unit_test_creation",
          "test_automation"
        ],
        "example_files": [
          "rAgents/test/fuzzy-search.test.js",
          "rAgents/test/sanitize-name-slash.test.js"
        ]
      }
    },
    "integration_testing": {
      "playwright_testing": {
        "tool_id": "playwright_test_framework",
        "type": "integration_testing",
        "availability": "installed",
        "capabilities": [
          "end_to_end_testing",
          "browser_automation",
          "visual_testing",
          "performance_testing"
        ],
        "example_files": [
          "rAgents/test/header-name-centering.test.js"
        ]
      }
    }
  },
  "backup_and_sync": {
    "json_backup_system": {
      "tool_id": "stacktrackr_json_backup",
      "type": "backup_automation",
      "availability": "custom_built",
      "location": "rAgents/engine/backup/json_backup_system.py",
      "capabilities": [
        "json_file_backup",
        "timestamped_versioning",
        "emergency_recovery",
        "memory_fallback"
      ],
      "functions": [
        "backup_json_files()",
        "restore_from_backup()",
        "load_json_memory_fallback()",
        "create_emergency_recovery_package()"
      ]
    }
  },
  "deployment_tools": {
    "framework_deployment": {
      "tool_id": "stacktrackr_framework_deployer",
      "type": "project_setup_automation",
      "availability": "custom_built",
      "location": "rAgents/engine/scripts/deploy-json-agent-framework.sh",
      "capabilities": [
        "new_project_setup",
        "json_system_deployment",
        "directory_structure_creation",
        "documentation_generation"
      ],
      "usage": "./rAgents/engine/scripts/deploy-json-agent-framework.sh /path/to/project ProjectName"
    }
  },
  "agent_coordination": {
    "json_memory_system": {
      "tool_id": "stacktrackr_json_memory",
      "type": "agent_coordination",
      "availability": "core_system",
      "capabilities": [
        "cross_agent_context_sharing",
        "task_coordination",
        "progress_tracking",
        "decision_logging"
      ],
      "json_files": [
        "rAgents/agents.json",
        "rAgents/tasks.json", 
        "rAgents/memory.json",
        "rAgents/functions.json",
        "rAgents/recentissues.json"
      ]
    }
  },
  "tool_usage_guidelines": {
    "for_agents": "Always check tool availability before using. Prefer built-in tools over external dependencies.",
    "capability_discovery": "Use 'which [tool]' or 'command -v [tool]' to verify tool availability",
    "fallback_strategies": "Always have backup approaches when tools are unavailable",
    "documentation": "Document tool usage in debug files when troubleshooting issues"
  },
  "integration_protocols": {
    "with_json_system": "All tool usage should be logged in relevant JSON files (recentissues.json for debugging, performance.json for metrics)",
    "with_debugging": "Tool output should be captured in rAgents/debug/ with descriptive filenames",
    "with_testing": "Test results should be stored in rAgents/test/ with proper naming conventions"
  },
  "fallback_protocols": {
    "no_tool_available": "Use manual approaches and document limitations in recentissues.json",
    "tool_failure": "Log errors in errors.json and implement workaround procedures",
    "missing_dependencies": "Document missing tools in structure.json and provide installation guidance"
  },
  "schema": {
    "tool_entry": {
      "tool_id": "string - Unique identifier for tool",
      "type": "string - Category of tool (editor, testing, runtime, etc.)",
      "availability": "string - Installation status (installed, built-in, on-demand, etc.)",
      "capabilities": "array - List of what the tool can do",
      "use_cases": "array - Specific scenarios where tool is useful",
      "integration": "object - How tool integrates with our system"
    }
  },
  "instructions": {
    "for_system": "This file provides complete tool inventory for agents. Update when new tools are added or capabilities change.",
    "tool_verification": "Agents should verify tool availability before use and update this file with discoveries",
    "capability_expansion": "Document new tool capabilities as they are discovered during development",
    "fallback_operation": "When tools are unavailable, use manual methods and document in appropriate JSON files"
  }
}