{
  "metadata": {
    "version": "1.0",
    "created": "2025-08-17",
    "purpose": "Bootstrap configuration for GitHub Copilot memory protocol compliance",
    "description": "Ensures all agents follow mandatory memory writing protocol with MCP as primary source"
  },
  "bootstrap_protocol": {
    "memory_hierarchy": {
      "primary": "MCP Memory Server + Extended Context Intelligence",
      "secondary": "Local JSON Files (shared team memory)",
      "tertiary": "Personal JSON Files (agent-specific)",
      "background": "Automation Systems (Memory Scribe, chat logging)",
      "intelligence_layer": "Memory Intelligence System (recall.js, memory-intelligence.js)"
    },
    "mandatory_actions": {
      "session_start": [
        "run agent-self-management.js startup (check memory, git status, recent tasks)",
        "mcp_memory_read_graph",
        "initialize memory intelligence system",
        "run fast recall test to verify memory availability",
        "create or update current session entity",
        "record session objectives in MCP memory",
        "verify critical system status"
      ],
      "during_work": [
        "log task starts with agent-self-management.js",
        "update MCP memory every 3-5 significant actions",
        "use add-context.js for important discoveries",
        "record all decisions with reasoning in MCP",
        "update local JSON when making architectural changes",
        "document any new functions or processes",
        "consider incremental git backup after major changes (> 3 files)"
      ],
      "task_completion": [
        "run agent-self-management.js task-complete with outcome and files",
        "automatic git backup if criteria met (> 3 files or critical changes)",
        "update short-term memory JSON with task details",
        "add completion to extended context for future recall"
      ],
      "session_end": [
        "run agent-self-management.js cleanup",
        "summarize session accomplishments in MCP",
        "add session summary to extended context", 
        "update shared team memory files",
        "record any protocol improvements",
        "verify critical information is preserved"
      ]
    },
    "agent_contribution_requirements": {
      "git_backups": "incremental commits before major changes, automatic on task completion",
      "memory_checks": "startup check for recent tasks and incomplete work",
      "short_term_memory": "agent-session-memory.json updated every task completion",
      "extended_context": "all significant work logged via add-context.js",
      "mcp_integration": "active entities and relationships maintained",
      "brainpool_contribution": "every agent must contribute memory, decisions, and patterns"
    },
    "memory_intelligence_integration": {
      "fast_recall": "node /Volumes/DATA/GitHub/rEngine/rEngine/recall.js 'query'",
      "add_context": "node /Volumes/DATA/GitHub/rEngine/rEngine/add-context.js 'title' 'description' 'type'",
      "advanced_search": "node /Volumes/DATA/GitHub/rEngine/rEngine/memory-intelligence.js recall 'query'",
      "pattern_matching": "searches across extended context, agent memory, and tasks",
      "temporal_awareness": "recent items boosted, historical patterns preserved"
    },
    "llm_optimization": {
      "primary_api": "groq (fastest response)",
      "fallback_chain": ["claude", "openai", "gemini", "qwen_local"],
      "performance_threshold": "5 seconds max response time",
      "recommendation": "use API LLMs when qwen is too slow",
      "mcp_integration": "use MCP calls to scribe to avoid user popups"
    },
    "violation_recovery": {
      "missed_decision": "retroactively document in MCP with reasoning",
      "missed_update": "immediately update both MCP and local JSON",
      "protocol_violation": "acknowledge, correct, and document in Session_Protocol_Violation entity"
    },
    "automation_boundaries": {
      "memory_scribe": "background console logging only",
      "chat_logging": "extended context retrieval only when needed",
      "mcp_memory": "primary active working memory",
      "local_json": "team coordination and backup"
    }
  },
  "entity_naming_conventions": {
    "sessions": "Current_Session_YYYY_MM_DD",
    "technical_work": "Technical_Work_[project]_[date]",
    "debugging": "Debugging_Session_[issue]_[date]",
    "projects": "[ProjectName]_[Component]_Status",
    "architecture": "[ProjectName]_Architecture_Decisions",
    "systems": "Memory_System_Architecture, Development_Environment_Status"
  },
  "compliance_checklist": {
    "before_major_work": [
      "read MCP memory graph",
      "understand current context",
      "record work plan in MCP"
    ],
    "during_implementation": [
      "update progress every 3-5 actions",
      "record decisions with reasoning",
      "maintain MCP memory synchronization"
    ],
    "after_completion": [
      "document results in MCP",
      "update shared team files",
      "verify information preservation"
    ]
  },
  "critical_rules": {
    "never": [
      "start work without reading MCP memory graph",
      "complete major tasks without updating MCP memory",
      "end sessions without recording accomplishments",
      "rely only on automation systems for memory",
      "skip MCP updates because 'it's documented elsewhere'"
    ],
    "always": [
      "use MCP memory as primary knowledge source",
      "update MCP memory every 3-5 significant actions",
      "keep local JSON files synchronized with MCP updates",
      "treat automation as background support only",
      "record decision reasoning in MCP memory"
    ]
  },
  "implementation_status": {
    "protocol_created": "2025-08-17",
    "compliance_enforced": true,
    "shared_memory_updated": true,
    "bootstrap_documentation": "/agents/BOOTSTRAP_MEMORY_PROTOCOL.md",
    "team_coordination": "agents/memory.json, functions.json, decisions.json"
  }
}
