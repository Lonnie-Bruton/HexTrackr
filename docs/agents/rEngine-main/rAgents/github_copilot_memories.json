{
  "metadata": {
    "agent_name": "GitHub Copilot",
    "agent_type": "VS Code Integration",
    "technical_base": "Claude 3.5 Sonnet",
    "created": "2025-08-16",
    "last_updated": "2025-08-17 07:47",
    "session_count": 3,
    "total_tasks_completed": 7,
    "ai_tag_in_system": "ACTIVE - Terminal commands ready",
    "memory_scribe_status": "RUNNING - Port 3002 (REAL-TIME CONSOLE MONITORING ACTIVE)",
    "ollama_status": "RUNNING - Port 11434 (5 models available)", 
    "mcp_server_status": "RUNNING - Both servers active",
    "memory_system_status": "FULLY OPERATIONAL - Real-time scribing confirmed",
    "port_assignments": {
      "memory_scribe_dashboard": 3002,
      "mcp_server": 3001,
      "openwebui": 3031,
      "ollama_api": 11434,
      "stacktrackr_app": 8080
    },
    "claude_sonnet": {
      "agent_name": "Claude 3.5 Sonnet",
      "agent_type": "Direct API Access",
      "technical_base": "Claude 3.5 Sonnet",
      "created": "2025-08-16",
      "last_updated": "2025-08-16 11:47",
      "session_count": 1,
      "total_tasks_completed": 0
    }
  },
  "shared_memory_index": {
    "agents": {
      "file": "rAgents/agents.json",
      "purpose": "Agent definitions and capabilities",
      "last_checked": "2025-08-17 06:10"
    },
    "tasks": {
      "file": "rAgents/tasks.json",
      "purpose": "Active tasks and project status",
      "last_checked": "2025-08-16 11:45"
    },
    "decisions": {
      "file": "agents/decisions.json",
      "purpose": "Architectural and design decisions",
      "last_checked": "2025-08-17 08:05",
      "last_updated": "2025-08-17 08:05 - Added memory system architecture decisions"
    },
    "functions": {
      "file": "agents/functions.json",
      "purpose": "Function definitions and ownership",
      "last_checked": "2025-08-17 08:05",
      "last_updated": "2025-08-17 08:05 - Added memory monitoring functions"
    },
    "errors": {
      "file": "agents/errors.json",
      "purpose": "Known errors and solutions",
      "last_checked": "2025-08-16 11:45"
    },
    "memory": {
      "file": "agents/memory.json",
      "purpose": "Shared project memory",
      "last_checked": "2025-08-17 08:05",
      "last_updated": "2025-08-17 08:05 - Added memory system status to metadata"
    },
    "preferences": {
      "file": "agents/preferences.json",
      "purpose": "Project preferences and settings",
      "last_checked": "2025-08-16 11:45"
    },
    "styles": {
      "file": "agents/styles.json",
      "purpose": "Visual style definitions",
      "last_checked": "2025-08-16 11:45"
    },
    "claude_sonnet": {
      "agents": {
        "file": "agents/agents.json",
        "purpose": "Agent definitions and capabilities",
        "last_checked": "2025-08-16 11:47"
      },
      "tasks": {
        "file": "agents/tasks.json",
        "purpose": "Active tasks and project status",
        "last_checked": "2025-08-16 11:47"
      },
      "decisions": {
        "file": "agents/decisions.json",
        "purpose": "Architectural and design decisions",
        "last_checked": "2025-08-16 11:47"
      },
      "functions": {
        "file": "agents/functions.json",
        "purpose": "Function definitions and ownership",
        "last_checked": "2025-08-16 11:47"
      },
      "errors": {
        "file": "agents/errors.json",
        "purpose": "Known errors and solutions",
        "last_checked": "2025-08-16 11:47"
      },
      "memory": {
        "file": "agents/memory.json",
        "purpose": "Shared project memory",
        "last_checked": "2025-08-16 11:47"
      }
    }
  },
  "personal_insights": {
    "coding_patterns": [
      "StackTrackr follows client-side architecture with localStorage persistence",
      "Project uses vanilla JavaScript with modular file structure",
      "Heavy focus on performance optimization and memory management"
    ],
    "optimization_discoveries": [
      "Current performance optimization project has 6 phases with dependencies",
      "Search debouncing and event delegation are critical path items",
      "Chart.js memory leaks identified in modal components"
    ],
    "debugging_strategies": [
      "Git checkpoint protocol used before major changes",
      "Comprehensive testing required through Gemini Pro agent",
      "Rollback procedures defined for each phase"
    ],
    "performance_observations": [
      "Table rendering needs DOM fragment optimization",
      "localStorage batching needed for rapid edits",
      "Memory leaks in chart components during modal operations"
    ]
  },
  "task_preferences": {
    "preferred_approaches": [
      "Read existing JSON context files before starting work",
      "Follow established naming conventions and project structure", 
      "Update personal memory file with discoveries during work",
      "Update shared memory files quickly without explaining each step",
      "Ask for approval before publishing patches",
      "Confirm issues are actually resolved before documenting as fixed",
      "Make git checkpoint snapshot before starting any work",
      "Document snapshot creation in process workflow"
    ],
    "avoided_patterns": [
      "Making assumptions without reading project context",
      "Skipping git checkpoint protocol",
      "Working without understanding dependency chains",
      "Explaining every memory file update to user",
      "Publishing patches without user confirmation of fix",
      "Marking issues as resolved without verification"
    ],
    "efficiency_notes": [
      "Multi-agent coordination through tasks.json is well-structured",
      "Agent specializations clearly defined for optimal task assignment",
      "MCP integration provides enhanced context when available",
      "Full workflow compliance requires updating: recentissues.json, functions.json, decisions.json, and creating patch notes"
    ]
  },
  "learned_solutions": {
    "recurring_issues": [
      "Files modal closing issue - RESOLVED: Missing body overflow management and modal system integration"
    ],
    "effective_fixes": [
      "Files modal fix: Added document.body.style.overflow management and openModalById/closeModalById integration in api.js"
    ],
    "context_specific_solutions": [
      "StackTrackr workflow requires personal memory files for each agent",
      "Project has comprehensive task templates for different work types",
      "Performance optimization follows structured 6-phase approach",
      "Modal closing is handled by closeModalById function in utils.js and ESC key handlers in events.js",
      "Files modal uses standard modal pattern with filesCloseBtn and hideFilesModal function",
      "All modals must include document.body.style.overflow management and global modal system integration",
      "COPILOT_INSTRUCTIONS.md now points to AGENTS.md for primary workflow guidance",
      "We have upstash/context7 MCP access for fetching relevant documentation",
      "All external documentation should be cached in agents/docs/references/ folder for offline access",
      "agents/docs/references/ directory structure created with subdirectories for javascript, dom-apis, css, libraries, patterns",
      "Table audit project (table_audit_2025_08_16) ready for handoff to Claude 3.5 Sonnet - URGENT table hover styling bug needs immediate attention",
      "STANDARD: handoff.md files ALWAYS go in root directory (/handoff.md) for easy human access during agent transitions"
    ]
  },
      "session_notes": [
      "Fixed critical JavaScript errors preventing app from loading",
      "Added missing export functions: exportCsv, exportJson, exportPdf to inventory.js",
      "Resolved duplicate CatalogProvider class definition between catalog-providers.js and catalog-api.js",
      "Fixed encryption.isEncryptionSetup() call to use hasMasterPassword() method instead",
      "Files modal fix ready for testing once JS errors are resolved",
      "User confirmed all fixes working - application loads successfully, 1319 items displaying",
      "Table audit task created with URGENT Phase 1: table hover styling bug affecting collect buttons",
      "Documentation management workflow established with context7 MCP integration",
      "CRITICAL TEAM MEMORY PROTOCOL: When user says 'we/us/everyone' = team memory (shared), when user says 'you' = personal memory (agent-specific)",
      "Memory distribution protocol established August 16, 2025 - affects all AI agents working on StackTrackr",
      "Pronoun-based memory classification ensures proper knowledge distribution across GitHub Copilot, Claude, GPT, Gemini teams",
      "USER PERSONAL REQUEST: Always provide export options list when user asks - use 'export-options' prompt from agents/prompts.json",
      "Export options reference: 17 different export types available (chatgpt, claude, gemini, copilot, memory, changeb, code, markdown, zip, delta, private variants, universal options)",
      "User wants export information readily available via prompt system - added as prompt alias 'export-options' in category 'reference'",
      "GPT SERVERLESS COLLABORATION SUCCESS: ChatGPT export worked excellently - user confirmed GPT processed full project details quickly",
      "GPT returned comprehensive serverless plan (stackrtrackr-serverless-plan-20250817-011007.zip) with AWS Lambda + API Gateway architecture",
      "Serverless plan includes: spot price API normalization, secure provider key management, scheduled jobs, caching strategy, rate limiting",
      "GPT provided complete implementation checklist with Phase 1 (pilot) and Phase 2 (production) rollout strategy",
      "Architecture: server-optional design - app works offline, upgrades when serverless available via LAMBDA_BASE_URL detection",
      "Multi-provider support: Metals.dev, Metals-API, MetalPriceAPI normalization to unified schema",
      "Security features: AWS Secrets Manager for API keys, CloudWatch monitoring, per-IP rate limits",
      "MemoryChangeBundle system validated: bidirectional collaboration workflow confirmed working between human/GPT",
      "PHASE 1 DOCKER IMPLEMENTATION: Created complete local serverless stack based on GPT's architecture plan",
      "Docker setup includes: Node.js API (Express), PostgreSQL (price history), Redis (caching), Nginx proxy, automated price fetcher",
      "Local architecture mirrors AWS Lambda + API Gateway pattern: /api/prices, /api/proxy/:provider, /api/config endpoints",
      "Client-side integration: serverless-api.js auto-detects local API, falls back to direct providers, shows 'Enhanced API Active' indicator",
      "Phase 1 validates: API relay patterns, server/client coordination, provider normalization, caching strategy",
      "Cost optimization: $0 local development before ~$5-15/month AWS deployment",
      "Ready for testing: ./docker-serverless/start.sh launches complete stack at localhost:3000",
      "AI TAG-IN SYSTEM IMPLEMENTED: Revolutionary multi-AI collaboration system now operational",
      "Terminal commands ready: ./heygpt, ./heygemini, ./consult for instant AI assistance",
      "Memory Scribe Dashboard running on port 3002 (avoiding OpenWebUI port 3000 conflict)",
      "AI Provider Status: Ollama (13 models), OpenAI/Gemini/Qwen (API keys needed), smart fallback system",
      "Terminal AI commands: No prompts, instant responses, seamless collaboration during conversations",
      "Usage patterns: heygpt for debugging, heygemini for architecture, consult for team perspectives",
      "Global access setup: export PATH includes memory-scribe directory, aliases (gpt, gemini, team) available",
      "Context awareness: Full conversation history, project state, Memory Scribe data auto-shared with AI models",
      "OpenWebUI integration planned: Custom functions for seamless chat-based AI collaboration",
      "CRITICAL MEMORY SYSTEM LESSONS LEARNED:",
      "- MCP servers crash when Docker port conflicts occur - always check port assignments",
      "- Memory Scribe auto-restarts but MCP servers require manual restart or VS Code restart",
      "- Manual MCP server startup: 'npx @modelcontextprotocol/server-memory' and 'npx @upstash/context7-mcp@latest'",
      "- Memory system monitoring script created with 15-minute automated health checks",
      "- Port assignments critical: Memory Scribe (3002), MCP (varies), OpenWebUI (3031), Ollama (11434)",
      "- Desktop notifications setup for memory system failures - too important to fail silently",
      "- Auto-restart capability built into monitoring for Memory Scribe dashboard",
      "- JSON status logging enables machine-readable health monitoring",
      "- Memory system status check command: './scripts/memory-system-monitor.sh'",
      "- Both MCP servers needed for full functionality: memory server + context7 documentation server",
      "REAL-TIME CONSOLE MONITORING NOW ACTIVE:",
      "- Memory Scribe now monitors ALL console output in real-time",
      "- Tracks AI agent activities: file operations, terminal commands, memory writes",
      "- API endpoints: /api/console/activity (summary), /api/console/recent (latest activities)",
      "- Console log file: /memory-scribe/console-activity.log",
      "- AI activity JSON: /memory-scribe/ai-agent-activity.json",
      "- Monitors VS Code extension logs, terminal output, and Memory Scribe logs",
      "- Pattern detection for GitHub Copilot, Claude, GPT, Gemini, Memory Scribe, MCP activity",
      "- Activity classification: file_edit, file_create, file_read, terminal_command, memory_operation",
      "- Real-time verification: Memory Scribe IS scribing - 12 activities logged today"
    ],
  "task_delegation_ready": {
    "table_audit_project": {
      "project_id": "table_audit_2025_08_16", 
      "agent": "claude_3_5_sonnet",
      "status": "ready_for_handoff",
      "urgent_phase": "Phase 1 - Table hover styling bug fix",
      "user_context": "User reported hover effects causing visual artifacts in table rows",
      "next_action": "Claude should start with Phase 1 - critical hover styling issue",
      "handoff_timestamp": "2025-08-16"
    }
  }
}
