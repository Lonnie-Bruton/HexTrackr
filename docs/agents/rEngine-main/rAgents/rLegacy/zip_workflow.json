{
  "metadata": {
    "version": "1.0",
    "created": "2025-08-16",
    "purpose": "Cross-platform workflow for ChatGPT/GPT5 zip file collaboration",
    "description": "Handles the zip→upload→download→unzip workflow with path normalization and script compatibility",
    "last_updated": "2025-08-16T20:00:00Z"
  },
  "workflow_overview": {
    "description": "Safe process for collaborating with ChatGPT/GPT5 via zip files",
    "advantages": [
      "Portable memory system travels with project",
      "All context preserved in JSON files",
      "Clean handoff without environment dependencies",
      "Cross-platform compatibility built-in"
    ],
    "workflow_steps": [
      "1. Run pre-zip preparation script",
      "2. Create zip file with normalized paths",
      "3. Upload to ChatGPT/GPT5",
      "4. Download modified zip from GPT",
      "5. Run post-unzip restoration script",
      "6. Validate and merge changes safely"
    ]
  },
  "gotchas_identified": {
    "path_dependencies": {
      "issue": "Scripts contain hardcoded absolute paths like '/Volumes/DATA/GitHub/rEngine'",
      "affected_files": [
        "agents/scripts/handoff.sh",
        "agents/scripts/sync_tool.sh", 
        "agents/scripts/sync_memory_vault.py",
        "agents/scripts/mcp_json_sync.py"
      ],
      "impact": "Scripts will fail when unzipped on different machines",
      "solution": "Create portable versions that detect project root dynamically"
    },
    "executable_permissions": {
      "issue": "Shell scripts lose executable permissions in zip files",
      "affected_files": [
        "agents/scripts/handoff.sh",
        "agents/scripts/sync_tool.sh"
      ],
      "impact": "Scripts become non-executable after unzip",
      "solution": "Post-unzip script to restore permissions automatically"
    },
    "environment_variables": {
      "issue": "Scripts expect specific environment setup",
      "affected_areas": [
        "Git repository context",
        "Python environment paths",
        "Shell environment (bash vs zsh)"
      ],
      "impact": "Scripts may fail due to environment differences",
      "solution": "Environment-agnostic script versions"
    },
    "localhost_references": {
      "issue": "Code contains localhost URLs that may not work in all contexts",
      "affected_files": [
        "js/rengine-api-client.js",
        "js/rsynk-integration.js",
        "index.html"
      ],
      "impact": "API calls may fail in different environments",
      "solution": "These are OK - they're runtime environment detection, not hardcoded dependencies"
    }
  },
  "safety_measures": {
    "pre_zip_checklist": [
      "Commit all current changes to git",
      "Create backup of agents/ directory",
      "Run memory sync to ensure consistency",
      "Generate portable script versions",
      "Create project state snapshot"
    ],
    "post_unzip_checklist": [
      "Restore script executable permissions", 
      "Validate JSON file integrity",
      "Check for path corruption",
      "Merge changes safely with git",
      "Run consistency validation"
    ],
    "validation_steps": [
      "Verify all JSON files parse correctly",
      "Check cross-references between memory files",
      "Validate script functionality",
      "Test critical workflows",
      "Ensure no data loss occurred"
    ]
  },
  "automation_scripts": {
    "prepare_for_zip": {
      "purpose": "Prepare project for zip→GPT workflow",
      "actions": [
        "Create portable script versions",
        "Generate environment-agnostic configs",
        "Create restoration metadata",
        "Backup current state"
      ]
    },
    "restore_from_zip": {
      "purpose": "Restore project after unzipping GPT modifications",
      "actions": [
        "Fix script permissions",
        "Restore absolute paths where needed",
        "Validate file integrity",
        "Merge changes safely"
      ]
    }
  },
  "portable_memory_advantages": {
    "context_preservation": "All agent memories, tasks, and decisions travel with the zip",
    "cross_platform_compatibility": "JSON files work identically on any system",
    "state_consistency": "GPT agents get the same context as local agents",
    "workflow_continuity": "Work can resume seamlessly after zip roundtrip",
    "collaboration_efficiency": "No need to re-explain context to GPT agents"
  },
  "recommended_zip_contents": {
    "include": [
      "All source code files",
      "Complete agents/ directory with all JSON memories",
      "Documentation and README files",
      "Package.json and configuration files",
      "Portable versions of scripts"
    ],
    "exclude": [
      "node_modules/ directory",
      ".git/ directory (optional - can include for full context)",
      "Backup directories with old data",
      "Log files with sensitive paths",
      "OS-specific temporary files"
    ]
  },
  "gpt_collaboration_benefits": {
    "instant_context": "GPT gets full project understanding from memory files",
    "consistent_decisions": "Previous agent decisions preserved in JSON",
    "workflow_continuity": "Tasks and milestones maintained across platforms",
    "error_prevention": "Known issues and patterns available to GPT",
    "smart_recommendations": "GPT can reference existing patterns and preferences"
  }
}
