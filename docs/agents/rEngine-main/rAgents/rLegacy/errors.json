{
  "metadata": {
    "version": "1.0",
    "created": "2025-08-16",
    "purpose": "Error pattern recognition and prevention system for StackTrackr agentic system",
    "description": "Comprehensive error tracking, pattern analysis, and proactive prevention strategies to minimize failures and accelerate recovery",
    "retention_policy": "Keep error patterns indefinitely, detailed logs for 60 days, critical errors permanently"
  },
  "intelligent_error_learning": {
    "pattern_recognition": {
      "automatic_categorization": "ML-style pattern matching to automatically categorize new errors",
      "severity_prediction": "predict error impact based on historical patterns and system context",
      "root_cause_analysis": "intelligent analysis of error chains to identify true root causes",
      "prevention_opportunities": "proactive identification of code patterns that lead to errors"
    },
    "agent_performance_tracking": {
      "error_attribution": "track which agent changes introduced errors (learning opportunity not blame)",
      "learning_velocity": "measure how quickly agents learn from errors and improve",
      "strength_identification": "identify which types of errors each agent is best at preventing/fixing",
      "collaboration_patterns": "track which agent combinations produce the most robust code"
    },
    "natural_communication_about_errors": {
      "friendly_error_reports": "Hey team, I noticed a pattern in the table rendering - when we hit large datasets, performance drops. Here's what I learned...",
      "learning_sharing": "Found a great solution for the localStorage race condition! Here's the pattern that works reliably...",
      "proactive_warnings": "Heads up - I see we're about to work on chart functionality. Based on past patterns, here are some things to watch out for...",
      "collective_improvement": "Based on our error history, I think we should update our standard practices for API integration. What do you think?"
    },
    "predictive_prevention": {
      "code_review_insights": "flag potential issues before they become errors based on learned patterns",
      "architecture_recommendations": "suggest structural improvements based on accumulated error knowledge",
      "testing_focus_areas": "prioritize testing in areas where errors are most likely to occur",
      "defensive_coding_patterns": "recommend specific defensive coding practices based on historical failures"
    }
  },
  "error_signatures": {
    "common_failure_modes": [
      {
        "error_type": "dom_manipulation_performance",
        "signature": "slow_table_rendering_with_large_datasets",
        "symptoms": ["page_freeze", "high_cpu_usage", "browser_unresponsive"],
        "root_causes": ["individual_dom_insertions", "lack_of_fragment_batching", "synchronous_rendering"],
        "frequency": "high - occurs with datasets > 1000 rows",
        "impact_severity": "medium - user experience degradation",
        "detection_pattern": "performance.json shows > 3s rendering time",
        "prevention_strategy": "always_use_document_fragments_for_bulk_operations"
      },
      {
        "error_type": "state_synchronization_failure",
        "signature": "localStorage_data_inconsistency",
        "symptoms": ["data_not_persisting", "stale_data_display", "form_values_lost"],
        "root_causes": ["race_conditions", "incomplete_save_operations", "browser_storage_limits"],
        "frequency": "medium - occurs during high user activity",
        "impact_severity": "high - data loss potential",
        "detection_pattern": "variables.json state != localStorage state",
        "prevention_strategy": "atomic_save_operations_with_validation"
      },
      {
        "error_type": "memory_leak_in_charts",
        "signature": "chart_instances_not_destroyed",
        "symptoms": ["gradually_increasing_memory", "browser_slowdown", "eventual_crash"],
        "root_causes": ["chart_destroy_not_called", "event_listeners_not_removed", "canvas_references_retained"],
        "frequency": "low - but cumulative impact",
        "impact_severity": "high - system stability",
        "detection_pattern": "performance.json shows increasing memory over time",
        "prevention_strategy": "mandatory_cleanup_in_chart_lifecycle"
      },
      {
        "error_type": "api_rate_limiting",
        "signature": "external_api_requests_blocked",
        "symptoms": ["failed_spot_price_updates", "numista_search_failures", "429_error_responses"],
        "root_causes": ["excessive_request_frequency", "missing_rate_limiting", "concurrent_requests"],
        "frequency": "medium - during active usage periods",
        "impact_severity": "medium - feature availability",
        "detection_pattern": "performance.json shows high_api_failure_rate",
        "prevention_strategy": "implement_request_throttling_and_caching"
      },
      {
        "error_type": "css_theme_application_failure",
        "signature": "theme_variables_not_updating",
        "symptoms": ["incorrect_colors", "mixed_theme_elements", "style_inconsistencies"],
        "root_causes": ["css_variable_scope_issues", "theme_class_not_applied", "css_specificity_conflicts"],
        "frequency": "low - usually during theme switching",
        "impact_severity": "low - visual inconsistency",
        "detection_pattern": "computed_styles != expected_theme_values",
        "prevention_strategy": "validate_theme_application_after_changes"
      }
    ],
    "error_propagation_patterns": [
      {
        "initial_error": "function_modification_without_dependency_check",
        "propagation_chain": [
          "modified_function_breaks_caller",
          "caller_function_returns_undefined",
          "ui_component_receives_invalid_data",
          "rendering_fails_or_displays_incorrectly"
        ],
        "cascade_prevention": "mandatory_structure.json_dependency_review",
        "containment_strategy": "input_validation_at_component_boundaries"
      },
      {
        "initial_error": "state_update_without_persistence",
        "propagation_chain": [
          "ui_shows_updated_state",
          "page_reload_loses_changes",
          "user_confusion_and_rework",
          "potential_data_loss"
        ],
        "cascade_prevention": "atomic_state_update_with_persistence_validation",
        "containment_strategy": "state_change_confirmation_mechanisms"
      }
    ],
    "recovery_success_rates": {
      "automatic_recovery": {
        "dom_performance_issues": "85% - fragment_batching_implementation",
        "state_sync_issues": "78% - localStorage_repair_and_reload",
        "memory_leaks": "92% - forced_cleanup_and_restart",
        "api_failures": "89% - fallback_to_cached_data"
      },
      "manual_intervention_required": {
        "complex_state_corruption": "45% - requires_user_data_validation",
        "browser_compatibility_issues": "60% - environment_specific_solutions",
        "external_service_outages": "30% - dependent_on_service_restoration"
      }
    },
    "prevention_strategies": [
      {
        "strategy": "proactive_dependency_checking",
        "implementation": "mandatory_structure.json_review_before_function_changes",
        "effectiveness": "90% - prevents cascade failures",
        "cost": "5_minutes_per_change",
        "automation_potential": "high - can_be_scripted"
      },
      {
        "strategy": "performance_monitoring_integration",
        "implementation": "real_time_performance.json_monitoring_with_alerts",
        "effectiveness": "85% - early_detection_of_issues",
        "cost": "minimal - automated_monitoring",
        "automation_potential": "very_high - fully_automated"
      },
      {
        "strategy": "comprehensive_state_validation",
        "implementation": "variables.json_state_integrity_checks",
        "effectiveness": "88% - prevents_data_inconsistencies",
        "cost": "3_minutes_per_state_change",
        "automation_potential": "medium - partial_automation_possible"
      }
    ]
  },
  "error_correlation": {
    "environmental_factors": [
      {
        "factor": "browser_type_and_version",
        "correlation_strength": "medium",
        "common_issues": ["webkit_specific_bugs", "firefox_memory_handling", "edge_compatibility"],
        "mitigation": "cross_browser_testing_in_development",
        "detection": "user_agent_analysis_in_error_reports"
      },
      {
        "factor": "dataset_size",
        "correlation_strength": "high",
        "common_issues": ["performance_degradation", "memory_exhaustion", "rendering_timeouts"],
        "mitigation": "progressive_loading_and_virtualization",
        "detection": "performance.json_metrics_correlation"
      },
      {
        "factor": "concurrent_user_actions",
        "correlation_strength": "medium",
        "common_issues": ["race_conditions", "state_conflicts", "resource_contention"],
        "mitigation": "operation_queuing_and_locking",
        "detection": "timing_analysis_of_user_interactions"
      }
    ],
    "agent_combinations": [
      {
        "agent_sequence": "claude_analysis → gpt_implementation",
        "error_probability": "low - 8%",
        "common_issues": ["implementation_deviates_from_design"],
        "success_factors": ["clear_specification", "comprehensive_documentation"],
        "optimization": "detailed_handoff_protocols"
      },
      {
        "agent_sequence": "gpt_implementation → gemini_testing",
        "error_probability": "medium - 15%",
        "common_issues": ["insufficient_test_coverage", "edge_case_misses"],
        "success_factors": ["comprehensive_test_scenarios", "performance_validation"],
        "optimization": "structured_testing_checklists"
      },
      {
        "agent_sequence": "parallel_gpt_instances",
        "error_probability": "high - 25%",
        "common_issues": ["conflicting_changes", "integration_failures"],
        "success_factors": ["clear_task_boundaries", "coordination_protocols"],
        "optimization": "dependency_isolation_and_merge_strategies"
      }
    ],
    "complexity_thresholds": [
      {
        "complexity_metric": "function_dependency_count",
        "error_threshold": "> 5 dependencies",
        "error_rate_increase": "300%",
        "mitigation": "mandatory_claude_review_for_high_dependency_functions",
        "prevention": "dependency_injection_and_modularization"
      },
      {
        "complexity_metric": "lines_of_code_modified",
        "error_threshold": "> 100 lines",
        "error_rate_increase": "150%", 
        "mitigation": "incremental_implementation_with_testing_checkpoints",
        "prevention": "break_large_changes_into_smaller_tasks"
      },
      {
        "complexity_metric": "number_of_files_affected",
        "error_threshold": "> 3 files",
        "error_rate_increase": "200%",
        "mitigation": "comprehensive_integration_testing",
        "prevention": "impact_analysis_before_multi_file_changes"
      }
    ]
  },
  "rapid_diagnosis": {
    "error_classification_tree": {
      "symptom_category": "performance_degradation",
      "classification_path": [
        "check_performance.json_for_recent_metrics_changes",
        "if_metrics_show_memory_increase → memory_leak_investigation",
        "if_metrics_show_cpu_spikes → computational_bottleneck_analysis",
        "if_metrics_show_network_delays → api_performance_investigation"
      ],
      "diagnostic_time_target": "< 2_minutes"
    },
    "pattern_matching_algorithm": {
      "step_1": "extract_error_symptoms_and_context",
      "step_2": "match_against_known_error_signatures",
      "step_3": "if_match_found → apply_known_solution",
      "step_4": "if_no_match → escalate_to_systematic_diagnosis",
      "accuracy_rate": "78% - for_known_patterns"
    },
    "automated_triage": {
      "critical_errors": "immediate_escalation_with_rollback_recommendation",
      "known_patterns": "auto_apply_solution_with_monitoring",
      "unknown_patterns": "structured_diagnosis_workflow_with_agent_assignment",
      "low_impact": "queue_for_batch_resolution"
    }
  },
  "learning_from_errors": {
    "pattern_evolution": [
      {
        "original_pattern": "manual_dom_updates_causing_performance_issues",
        "evolution_trigger": "new_rendering_optimization_techniques",
        "updated_pattern": "any_bulk_operation_should_use_optimized_batching",
        "learning_integration": "update_prevention_strategies_and_best_practices"
      }
    ],
    "failure_mode_discovery": [
      {
        "discovery_method": "correlation_analysis_across_multiple_incidents",
        "new_pattern_identification": "statistical_analysis_of_error_frequency_and_context",
        "validation_process": "test_hypothesis_with_controlled_reproduction",
        "integration_strategy": "add_to_error_signatures_and_update_prevention"
      }
    ],
    "prevention_effectiveness_tracking": [
      {
        "prevention_strategy": "mandatory_json_file_consultation",
        "before_implementation": "40% - error_rate",
        "after_implementation": "12% - error_rate",
        "effectiveness": "70% - reduction",
        "cost_benefit": "prevention_time_investment_saves_5x_in_error_resolution"
      }
    ]
  },
  "proactive_monitoring": {
    "early_warning_indicators": [
      {
        "indicator": "performance.json_metrics_trending_downward",
        "threshold": "20% - degradation_over_3_measurements",
        "action": "investigate_recent_changes_and_system_state",
        "prevention_window": "detect_issues_before_user_impact"
      },
      {
        "indicator": "increasing_memory_usage_without_proportional_data_growth",
        "threshold": "memory_growth > 2x_data_growth",
        "action": "check_for_memory_leaks_and_cleanup_failures",
        "prevention_window": "prevent_system_instability"
      }
    ],
    "health_check_automation": [
      {
        "check_type": "state_consistency_validation",
        "frequency": "after_every_significant_operation",
        "validation_method": "compare_ui_state_with_variables.json_and_localStorage",
        "auto_remediation": "repair_inconsistencies_when_safe"
      },
      {
        "check_type": "performance_baseline_monitoring",
        "frequency": "continuous_during_operations",
        "validation_method": "compare_current_metrics_with_performance.json_baselines",
        "auto_remediation": "trigger_optimization_routines_when_degradation_detected"
      }
    ]
  },
  "emergency_response": {
    "critical_error_protocols": [
      {
        "error_severity": "system_unusable",
        "immediate_action": "activate_rollback_from_recentissues.json",
        "escalation_timeline": "0_minutes - immediate",
        "communication": "notify_all_agents_and_pause_new_operations",
        "recovery_validation": "full_system_functionality_check"
      },
      {
        "error_severity": "data_corruption_risk",
        "immediate_action": "preserve_current_state_and_prevent_further_operations",
        "escalation_timeline": "1_minute - urgent",
        "communication": "alert_data_integrity_protocols",
        "recovery_validation": "data_consistency_verification"
      }
    ],
    "rollback_decision_matrix": [
      {
        "rollback_trigger": "error_affects_core_functionality",
        "rollback_scope": "revert_to_last_known_good_state",
        "rollback_validation": "verify_functionality_restoration",
        "learning_capture": "document_failure_mode_for_future_prevention"
      }
    ]
  },
  "continuous_improvement": {
    "error_reduction_targets": {
      "current_baseline": "18% - error_rate_across_all_operations",
      "6_month_target": "10% - error_rate",
      "improvement_strategies": ["enhanced_prevention", "better_pattern_recognition", "proactive_monitoring"],
      "measurement_method": "rolling_average_of_error_frequency_from_performance.json"
    },
    "learning_integration": {
      "new_pattern_addition": "add_to_error_signatures_within_24_hours",
      "prevention_strategy_updates": "update_based_on_effectiveness_analysis",
      "cross_system_learning": "share_patterns_with_broader_agentic_community"
    }
  },
  "schema": {
    "error_entry": {
      "error_id": "string - Unique identifier for error instance",
      "timestamp": "ISO datetime - When error occurred",
      "error_type": "string - Category of error",
      "severity": "string - critical|high|medium|low",
      "agent_id": "string - Agent involved when error occurred",
      "context": "object - System state and operation context",
      "symptoms": "array - Observable manifestations of the error",
      "root_cause": "string - Identified underlying cause",
      "resolution_applied": "string - How the error was resolved",
      "prevention_measures": "array - Steps to prevent recurrence",
      "learning_outcome": "string - What was learned from this error"
    }
  },
  "instructions": {
    "for_agents": "Log all errors with complete context to enable pattern recognition and prevention strategies",
    "error_handling": "Follow diagnostic trees for rapid error classification and resolution",
    "prevention_focus": "Use error patterns to proactively prevent similar issues in future tasks",
    "learning_application": "Apply lessons learned from previous errors to improve decision making"
  }
}