{
  "metadata": {
    "version": "2.0",
    "created": "2025-08-16",
    "purpose": "Complete architectural mapping for StackTrackr application",
    "description": "Comprehensive application structure across all files with relationships and optimization insights",
    "files_analyzed": 36,
    "js_files": 32,
    "css_files": 1,
    "html_files": 3,
    "last_updated": "2025-08-16T18:00:00Z"
  },
  "complete_architecture": {
    "application_layers": {
      "presentation_layer": {
        "description": "User interface and visual presentation",
        "files": ["index.html", "css/styles.css", "agents/lab/*.html"],
        "components": {
          "html_structure": {
            "index.html": {
              "main_sections": [
                "app-header with dynamic logo and navigation",
                "control-panel with search, filters, and pagination",
                "inventory-table (core data display)",
                "modal-system (edit, add, details, about)",
                "spot-price-cards section",
                "summary-section with charts and statistics"
              ],
              "dynamic_elements": [
                "table headers with sort functionality",
                "filter chips with remove capability",
                "pagination controls",
                "theme toggle button",
                "search input with autocomplete"
              ],
              "javascript_bindings": [
                "setupEventListeners() → comprehensive event management",
                "renderTable() → table content updates",
                "renderActiveFilters() → filter chip management",
                "setupSearch() → search functionality",
                "setupThemeToggle() → theme switching"
              ]
            }
          },
          "css_architecture": {
            "styles.css": {
              "organization": [
                "CSS Custom Properties (theme system)",
                "Component styles (modular design)",
                "Responsive design (mobile-first)",
                "Theme variations (light/dark/sepia)",
                "Animation and transitions"
              ],
              "theme_system": {
                "primary_colors": "Blue-based palette with metal-specific accents",
                "background_tokens": "Layered elevation system",
                "text_hierarchy": "Primary/secondary/muted text levels",
                "component_variants": "Type-specific styling (coins, bars, rounds)"
              },
              "javascript_integration": [
                "setTheme() manipulates [data-theme] attribute",
                "updateSpotCardColor() applies dynamic color classes",
                "renderActiveFilters() uses CSS classes for chips",
                "responsive column system controlled by JS"
              ]
            }
          }
        }
      },
      "business_logic_layer": {
        "description": "Core application logic and data processing",
        "primary_modules": {
          "inventory_management": {
            "files": ["js/inventory.js"],
            "functions": [
              "renderTable", "editItem", "deleteItem", "addItem",
              "loadInventory", "saveInventory", "recalcItem"
            ],
            "responsibilities": [
              "CRUD operations for inventory items",
              "Table rendering and pagination",
              "Data validation and sanitization",
              "Premium and value calculations"
            ]
          },
          "search_and_filter": {
            "files": ["js/search.js", "js/filters.js", "js/fuzzy-search.js"],
            "functions": [
              "filterInventory", "filterInventoryAdvanced", "fuzzySearch",
              "applyQuickFilter", "clearAllFilters", "renderActiveFilters"
            ],
            "responsibilities": [
              "Multi-criteria filtering logic",
              "Real-time search processing",
              "Filter state management",
              "Advanced search algorithms"
            ]
          },
          "data_processing": {
            "files": ["js/sorting.js", "js/pagination.js", "js/charts.js"],
            "functions": [
              "sortInventory", "calculateTotalPages", "renderPagination",
              "createPieChart", "generateColors", "destroyCharts"
            ],
            "responsibilities": [
              "Data sorting with multiple types",
              "Pagination calculations",
              "Chart generation and management",
              "Data visualization"
            ]
          }
        }
      },
      "integration_layer": {
        "description": "External integrations and API management",
        "modules": {
          "api_integration": {
            "files": ["js/api.js", "js/spot.js"],
            "functions": [
              "fetchSpotPrice", "updateSpotCardColor", "loadApiConfig",
              "setProviderStatus", "refreshProviderStatuses"
            ],
            "external_dependencies": [
              "Spot price APIs (multiple providers)",
              "Catalog APIs for item lookup",
              "Provider status monitoring"
            ]
          },
          "catalog_system": {
            "files": ["js/catalog-api.js", "js/catalog-manager.js", "js/catalog-providers.js"],
            "functions": [
              "CatalogAPI", "CatalogManager", "CatalogProviders",
              "searchCatalog", "importMappings", "exportMappings"
            ],
            "responsibilities": [
              "External catalog integration",
              "Item lookup and matching",
              "Mapping management"
            ]
          }
        }
      },
      "utility_layer": {
        "description": "Shared utilities and helper functions",
        "modules": {
          "core_utilities": {
            "files": ["js/utils.js", "js/constants.js"],
            "critical_functions": [
              "formatCurrency", "debounce", "monitorPerformance",
              "safeParseFloat", "sanitizeValue", "debugLog"
            ],
            "global_constants": [
              "APP_VERSION", "METALS", "LS_KEY", "THEME_KEY",
              "MAX_LOCAL_FILE_SIZE", "BRANDING_TITLE"
            ]
          },
          "state_management": {
            "files": ["js/state.js"],
            "global_variables": [
              "inventory", "spotPrices", "searchQuery", "columnFilters",
              "sortColumn", "sortDirection", "currentPage", "itemsPerPage",
              "activeFilters", "chartInstances"
            ]
          }
        }
      }
    }
  },
  "dependency_relationships": {
    "core_dependencies": {
      "inventory.js": {
        "depends_on": [
          "search.js (filterInventory)",
          "sorting.js (sortInventory)", 
          "pagination.js (calculateTotalPages, renderPagination)",
          "utils.js (formatCurrency, monitorPerformance)",
          "state.js (inventory, spotPrices)",
          "changeLog.js (logItemChanges)"
        ],
        "depended_by": [
          "events.js (event handlers)",
          "All UI interaction flows"
        ]
      },
      "events.js": {
        "depends_on": [
          "inventory.js (editItem, deleteItem, renderTable)",
          "search.js (filterInventory)",
          "filters.js (applyQuickFilter)",
          "pagination.js (goToPage)",
          "theme.js (toggleTheme)",
          "utils.js (debounce, safeAttachListener)"
        ],
        "depended_by": ["init.js"],
        "role": "Central event coordination hub"
      }
    },
    "data_flow_patterns": {
      "user_input": "events.js → business logic → state updates → renderTable",
      "api_updates": "api.js → state updates → UI refresh",
      "filter_changes": "filters.js → search.js → inventory.js → DOM update"
    }
  },
  "performance_architecture": {
    "critical_paths": [
      {
        "name": "Table Rendering Pipeline",
        "components": ["filterInventory", "sortInventory", "renderTable"],
        "optimization_features": [
          "DocumentFragment for DOM efficiency",
          "Debounced search input",
          "Performance monitoring wrapper",
          "Efficient column visibility management"
        ]
      },
      {
        "name": "Search and Filter Pipeline", 
        "components": ["search input", "fuzzySearch", "filterInventoryAdvanced"],
        "optimization_features": [
          "Real-time debouncing",
          "Fuzzy search algorithms",
          "Filter state caching",
          "Incremental filter application"
        ]
      }
    ],
    "bottleneck_analysis": {
      "high_impact": [
        "Large inventory table rendering",
        "Complex multi-criteria filtering",
        "Real-time search processing"
      ],
      "optimization_opportunities": [
        "Virtual scrolling for large datasets",
        "Web Workers for heavy calculations",
        "IndexedDB for better data management",
        "Memoization for repeated operations"
      ]
    }
  },
  "component_system": {
    "modal_components": {
      "files": ["js/detailsModal.js", "js/debugModal.js", "js/about.js", "js/numista-modal.js"],
      "pattern": "Self-contained modal systems with show/hide functionality",
      "dependencies": "Minimal - mostly independent of core table system"
    },
    "feature_modules": {
      "encryption": {
        "files": ["js/encryption.js"],
        "integration": "Optional feature with UI integration points"
      },
      "autocomplete": {
        "files": ["js/autocomplete.js"],
        "integration": "Enhanced search experience with catalog integration"
      },
      "export_system": {
        "functions": ["exportCsv", "exportJson", "exportPdf", "createBackupZip"],
        "integration": "Data export pipeline with multiple formats"
      }
    }
  },
  "scalability_analysis": {
    "current_architecture_strengths": [
      "Modular file organization",
      "Clear separation of concerns",
      "Efficient event delegation",
      "Optimized DOM manipulation",
      "Comprehensive utility layer"
    ],
    "scaling_considerations": [
      "Large dataset performance (10,000+ items)",
      "Memory usage optimization",
      "Network request optimization",
      "Mobile performance on older devices"
    ],
    "recommended_improvements": [
      "Implement virtual scrolling",
      "Add data pagination at storage level",
      "Consider IndexedDB for larger datasets",
      "Implement service worker for caching",
      "Add lazy loading for non-critical features"
    ]
  }
}
      "js/inventory.js": {
        "depends_on": ["js/utils.js", "js/storage.js", "js/charts.js"],
        "depended_by": ["index.html", "js/events.js"],
        "relationship_type": "core_module"
      },
      "js/utils.js": {
        "depends_on": [],
        "depended_by": ["js/inventory.js", "js/storage.js", "js/charts.js"],
        "relationship_type": "utility_module"
      }
    },
    "import_patterns": {
      "global_scripts": [
        "Script tags in index.html load modules in dependency order",
        "No module bundler - direct script loading",
        "Global namespace management through object patterns"
      ],
      "dependency_resolution": "Manual dependency management through script order"
    }
  },
  "data_flow": {
    "user_interactions": {
      "input_flow": "User → Events → Business Logic → Data Layer → Storage",
      "output_flow": "Storage → Data Layer → Business Logic → Presentation → User",
      "key_pathways": [
        {
          "name": "inventory_crud",
          "path": "User Input → events.js → inventory.js → storage.js → localStorage",
          "reverse_path": "localStorage → storage.js → inventory.js → DOM rendering"
        },
        {
          "name": "search_filter",
          "path": "Search Input → events.js → inventory.js (filter) → DOM update",
          "performance_notes": "Debouncing implemented to prevent excessive filtering"
        },
        {
          "name": "chart_generation",
          "path": "Data Selection → charts.js → Chart.js library → Canvas rendering",
          "cleanup_required": "Chart instances must be destroyed to prevent memory leaks"
        }
      ]
    },
    "api_flow": {
      "spot_prices": {
        "source": "External APIs (metals pricing)",
        "path": "API → js/api.js → data processing → inventory.js → UI update",
        "caching": "Results cached in localStorage with expiration",
        "error_handling": "Graceful fallback to cached data"
      },
      "numista_integration": {
        "source": "Numista API for coin data",
        "path": "User search → API call → data normalization → inventory addition",
        "rate_limiting": "Implemented to respect API limits"
      }
    }
  },
  "component_hierarchy": {
    "ui_components": {
      "inventory_table": {
        "file": "js/inventory.js",
        "functions": ["renderTable", "sortTable", "filterTable"],
        "dom_targets": ["#inventory-table", ".table-container"],
        "child_components": ["table_rows", "filter_controls", "sort_headers"],
        "state_dependencies": ["inventory_data", "filter_state", "sort_state"]
      },
      "modals": {
        "file": "js/inventory.js",
        "functions": ["showDetailsModal", "showEditModal", "closeModal"],
        "dom_targets": [".modal", ".modal-overlay"],
        "child_components": ["modal_content", "modal_buttons", "form_inputs"],
        "state_dependencies": ["selected_item", "edit_mode"]
      },
      "charts": {
        "file": "js/charts.js", 
        "functions": ["createChart", "updateChart", "destroyChart"],
        "dom_targets": ["#chart-container", ".chart-canvas"],
        "child_components": ["chart_legend", "chart_tooltips"],
        "state_dependencies": ["chart_data", "chart_type", "chart_options"]
      }
    },
    "layout_structure": {
      "header": {
        "contains": ["navigation", "theme_toggle", "search_bar"],
        "styling": "Fixed header with responsive design"
      },
      "main_content": {
        "contains": ["inventory_table", "action_buttons", "filters"],
        "styling": "Flexible layout with sidebar support"
      },
      "footer": {
        "contains": ["status_info", "version_info"],
        "styling": "Minimal footer with utility information"
      }
    }
  },
  "performance_considerations": {
    "bottlenecks": [
      {
        "area": "table_rendering",
        "issue": "Large datasets cause slow DOM updates",
        "mitigation": "DOM fragment batching, virtualization considerations"
      },
      {
        "area": "search_filtering",
        "issue": "Real-time search can be expensive",
        "mitigation": "Debouncing, indexing for large datasets"
      },
      {
        "area": "chart_rendering",
        "issue": "Memory leaks from chart instances",
        "mitigation": "Proper cleanup in chart lifecycle management"
      }
    ],
    "optimization_opportunities": [
      "Implement virtual scrolling for large tables",
      "Add service worker for offline functionality",
      "Optimize CSS delivery and unused style removal",
      "Implement lazy loading for chart components"
    ]
  },
  "security_boundaries": {
    "client_side_only": {
      "description": "All processing happens client-side",
      "implications": ["No server-side validation", "Data stored in localStorage", "XSS prevention critical"],
      "mitigations": ["Input sanitization", "CSP headers", "Secure data handling"]
    },
    "external_apis": {
      "risks": ["API key exposure", "CORS issues", "Rate limiting"],
      "protections": ["Environment-based API keys", "Proper CORS configuration", "Request throttling"]
    }
  },
  "testing_structure": {
    "unit_testable": {
      "utilities": "js/utils.js functions are pure and easily testable",
      "data_processing": "Business logic functions in inventory.js",
      "api_integration": "API response handling and error cases"
    },
    "integration_points": [
      "localStorage interaction patterns",
      "DOM manipulation and event handling",
      "Chart.js integration and lifecycle",
      "External API communication"
    ]
  },
  "schema": {
    "file_entry": {
      "depends_on": "array - Files this file requires",
      "depended_by": "array - Files that require this file", 
      "relationship_type": "string - Type of dependency relationship",
      "performance_impact": "string - Performance considerations",
      "testing_approach": "string - How to test this file"
    },
    "component": {
      "file": "string - Source file location",
      "functions": "array - Functions that implement this component",
      "dom_targets": "array - DOM elements this component manages",
      "child_components": "array - Sub-components",
      "state_dependencies": "array - Application state this component depends on",
      "performance_notes": "string - Performance characteristics"
    }
  },
  "instructions": {
    "for_agents": "Use this file to understand application architecture before making changes. Check dependencies to assess impact of modifications.",
    "dependency_tracking": "When adding new files or changing relationships, update the dependency graph",
    "performance_monitoring": "Track performance implications of architectural changes",
    "testing_guidance": "Use component hierarchy to identify integration test requirements"
  }
}