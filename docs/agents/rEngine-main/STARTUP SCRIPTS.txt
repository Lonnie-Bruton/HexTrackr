STARTUP SCRIPTS:

bash /Volumes/DATA/GitHub/rEngine/bin/launch-rEngine-services.sh


bash /Volumes/DATA/GitHub/rEngine/rEngine/start-mcp-servers.sh


bash /Volumes/DATA/GitHub/rEngine/rEngine/memory-sync-automation.sh manual


bash /Volumes/DATA/GitHub/rEngine/scripts/sync-memory-files.sh


node /Volumes/DATA/GitHub/rEngine/rEngine/recall.js "SESSION_HANDOFF"


bash /Volumes/DATA/GitHub/rEngine/rEngine/auto-launch-split-scribe.sh



ISSUES TO ADDRESS:

1

After sync, I noticed that two key memory fiels are not being updated by our agents, we need to esablish a protocol that the most recent handoff file is always written to handoff.json as well as creating the handoff file. 

We also need to ensure that anytime we are updating the Master Roadmap, Tasklists, Bug lists, or anything of that nature we are keeping all of our tasks from those lists organized in our memory in the tasks.json file so we can track the progress. 

Investigate our current work flow and identify the gap that has allowed this to occur. 

rMemory/rAgentMemories/handoff.json is 31 hours old - may need sync
rMemory/rAgentMemories/tasks.json is 33 hours old - may need sync


2

Ensure we have a protocol in the stack that addresses change controll, If an agent suggests a change to our platform, it needs to be documented in a change file with the rational behind the change and what will be changed, saved to r/Logs/Chagnes and when the change is complete it should be marked as completed in any task list or roadmap, it should also have a bugfix or fix documented if the change was successful, and if it failed, it should be noted in the change document as to why it failed. 


3




------------------------------------
------------------------------------

NOTES: Old Startup Protocol

# rEngine User Startup Protocol

**Version: 2.0.0**  
**Date: August 18, 2025**  
**Status: Active**

> ⚠️ **NOTE FOR AI AGENTS**: This document is for HUMAN REFERENCE ONLY. Do not execute these commands automatically. These are startup instructions for human users to initialize AI agent sessions manually.

## Quick Reference Guide

This document provides simple, one-command startup instructions for any AI agent working with the rEngine ecosystem. All scripts are designed to run without user prompts or hanging.

## Universal Startup Commands

### Auto-Detection (Recommended)
```bash
# Automatically detects your AI agent type and initializes
./quick-start.sh
```

### Specific Agent Types

| AI Agent | Command | Description |
|----------|---------|-------------|
| **Claude** | `./quick-start.sh claude` | Claude 3.5 Sonnet with Anthropic API |
| **GPT/ChatGPT** | `./quick-start.sh gpt` | OpenAI GPT-4 or ChatGPT |
| **Google Gemini** | `./quick-start.sh gemini` | Google Gemini Pro |
| **GitHub Copilot** | `./quick-start.sh github_copilot` | GitHub Copilot integration |
| **VS Code Copilot** | `./quick-start.sh vscode_copilot` | VS Code Copilot integration |

## Alternative Startup Methods

### Method 1: Quick Start (Minimal Output)
```bash
./quick-start.sh [agent-type]    # Fast, minimal logging
```

### Method 2: Full Startup (Detailed Output)
```bash
./startup.sh [agent-type]        # Detailed logging and status
```

### Method 3: New Terminal Window (macOS)
```bash
./launch-agent.applescript [agent-type]    # Opens new Terminal window
```

### Method 4: Direct Node.js (Advanced)
```bash
node rEngine/universal-agent-init.js --agent-type [type] --auto
```

## What These Scripts Do

Each startup command performs the following initialization:

✅ **Agent Detection** - Identifies which AI agent you're using  
✅ **Memory Integration** - Activates MCP (Model Context Protocol) memory system  
✅ **Session Creation** - Creates agent-specific memory files  
✅ **Service Verification** - Checks MCP servers and Docker services  
✅ **Git Backup** - Creates automatic checkpoint  
✅ **Context Loading** - Loads previous work and memory  
✅ **Status Display** - Shows system readiness and capabilities  

## Usage Examples

### Start Claude Session
```bash
cd /path/to/rEngine
./quick-start.sh claude
```

### Start GPT Session with Full Logging
```bash
cd /path/to/rEngine
./startup.sh gpt
```

### Auto-Detect Agent Type
```bash
cd /path/to/rEngine
./quick-start.sh
```

## Agent Detection Logic

The system automatically detects your agent type using:

1. **Command Line Arguments** - Explicit `--agent-type` parameter
2. **Environment Variables** - API keys (ANTHROPIC_API_KEY, OPENAI_API_KEY, etc.)
3. **Process Context** - VS Code environment, GitHub context
4. **Default Fallback** - Universal agent mode

## Memory Files Created

After startup, you'll have these memory files:

| File Type | Purpose | Example |
|-----------|---------|---------|
| **Agent Memory** | Agent-specific sessions | `claude-memory.json` |
| **Session Memory** | Current session tracking | `claude-session-1234567890.json` |
| **Extended Context** | Cross-session history | `extendedcontext.json` |
| **Persistent Memory** | MCP-integrated storage | `persistent-memory.json` |

## Troubleshooting

### Script Hangs or Prompts for Input
- Use `./quick-start.sh` instead of older scripts
- All new scripts are non-interactive by default

### Agent Not Detected
- Set your API key environment variable
- Use explicit agent type: `./quick-start.sh claude`

### Services Not Running
- Scripts will auto-check and provide start commands
- Run: `bash bin/launch-rEngine-services.sh`

### Memory Errors
- Scripts handle gracefully and continue
- Check `rMemory/rAgentMemories/` directory exists

## System Requirements

- **Node.js 18+** with ES modules support
- **Docker** and Docker Compose (for services)
- **Git** (for checkpoints)
- **MCP Servers** (auto-started by scripts)

## Environment Variables (Optional)

Set these for automatic agent detection:

```bash
# For Claude
export ANTHROPIC_API_KEY="your-key"

# For GPT/OpenAI
export OPENAI_API_KEY="your-key"

# For Gemini
export GEMINI_API_KEY="your-key"
export GOOGLE_API_KEY="your-key"

# For GitHub
export GITHUB_TOKEN="your-token"
```

## Success Indicators

When startup completes successfully, you'll see:

```
╔═══════════════════════════════════════════════════════════════════╗
║                    🚀 INITIALIZATION COMPLETE 🚀                  ║
║                                                                   ║
║     [Agent Name]                                 Agent Ready!     ║
╚═══════════════════════════════════════════════════════════════════╝

✅ All Systems Ready:
  🧠 MCP Memory Integration Active
  💾 Session-Specific Memory Created
  🔄 Dual Memory Protocol Enabled
  📦 Git Checkpoint Saved
```

## Migration from Old Scripts

### If you were using:
- `COPILOT_INSTRUCTIONS.md` → Keep for reference, use `./quick-start.sh` for routine startup
- `claude-agent-init.js` → Replace with `./quick-start.sh claude`
- Manual startup steps → Replace with `./quick-start.sh [agent]`

## Quick Command Reference

| Task | Command |
|------|---------|
| Start any agent | `./quick-start.sh` |
| Start Claude | `./quick-start.sh claude` |
| Start GPT | `./quick-start.sh gpt` |
| Start Gemini | `./quick-start.sh gemini` |
| Start with detailed logs | `./startup.sh [agent]` |
| Open in new terminal | `./launch-agent.applescript [agent]` |

---

**Remember**: Run these commands from the rEngine root directory. All scripts are designed to be non-interactive and will complete automatically without user input.


