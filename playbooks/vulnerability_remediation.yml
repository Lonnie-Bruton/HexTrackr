---
# HexTrackr Sample Vulnerability Remediation Playbook
- name: Security Patching and Vulnerability Remediation
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    remediation_log_dir: /var/log/hextrackr
    backup_dir: /var/backups/hextrackr
    
  pre_tasks:
    - name: Create remediation directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ remediation_log_dir }}"
        - "{{ backup_dir }}"
    
    - name: Log remediation start
      lineinfile:
        path: "{{ remediation_log_dir }}/remediation.log"
        line: "{{ ansible_date_time.iso8601 }} - Starting remediation on {{ inventory_hostname }}"
        create: yes

  tasks:
    - name: Update package cache (Debian/Ubuntu)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      
    - name: Update package cache (RedHat/CentOS)
      yum:
        update_cache: yes
      when: ansible_os_family == "RedHat"
    
    - name: Apply security updates (Debian/Ubuntu)
      apt:
        upgrade: safe
        autoremove: yes
        autoclean: yes
      when: ansible_os_family == "Debian"
      register: debian_updates
      
    - name: Apply security updates (RedHat/CentOS)
      yum:
        name: "*"
        state: latest
        security: yes
      when: ansible_os_family == "RedHat"
      register: redhat_updates
    
    - name: Remove unnecessary packages
      package:
        name: "{{ item }}"
        state: absent
      loop:
        - telnet
        - rsh-server
        - rsh
        - ypbind
        - ypserv
        - tftp
        - tftp-server
      ignore_errors: yes
    
    - name: Disable unnecessary services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - telnet
        - rsh
        - rlogin
        - vsftpd
      ignore_errors: yes
    
    - name: Configure SSH security
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }
        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }
      notify: restart ssh
    
    - name: Set file permissions for sensitive files
      file:
        path: "{{ item }}"
        mode: '0600'
        owner: root
        group: root
      loop:
        - /etc/passwd
        - /etc/shadow
        - /etc/group
        - /etc/gshadow
      ignore_errors: yes
    
    - name: Configure firewall rules
      ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto | default('tcp') }}"
      loop:
        - { rule: 'allow', port: '22', proto: 'tcp' }  # SSH
        - { rule: 'allow', port: '80', proto: 'tcp' }  # HTTP
        - { rule: 'allow', port: '443', port: 'tcp' }  # HTTPS
        - { rule: 'deny', port: '23', proto: 'tcp' }   # Telnet
        - { rule: 'deny', port: '135', proto: 'tcp' }  # RPC
        - { rule: 'deny', port: '139', proto: 'tcp' }  # NetBIOS
        - { rule: 'deny', port: '445', proto: 'tcp' }  # SMB
      when: ansible_os_family == "Debian"
      ignore_errors: yes

  post_tasks:
    - name: Log remediation completion
      lineinfile:
        path: "{{ remediation_log_dir }}/remediation.log"
        line: "{{ ansible_date_time.iso8601 }} - Remediation completed on {{ inventory_hostname }}"
    
    - name: Generate remediation report
      template:
        src: remediation_report.j2
        dest: "{{ remediation_log_dir }}/remediation_report_{{ ansible_date_time.epoch }}.json"
      vars:
        remediation_summary:
          hostname: "{{ inventory_hostname }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          os_family: "{{ ansible_os_family }}"
          debian_updates: "{{ debian_updates | default({}) }}"
          redhat_updates: "{{ redhat_updates | default({}) }}"
    
    - name: Send completion notification to HexTrackr API
      uri:
        url: "http://api:3232/api/automation/remediation-complete"
        method: POST
        body_format: json
        body:
          hostname: "{{ inventory_hostname }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          status: "completed"
          updates_applied: true
        headers:
          Content-Type: "application/json"
      delegate_to: localhost
      ignore_errors: yes

  handlers:
    - name: restart ssh
      systemd:
        name: sshd
        state: restarted
