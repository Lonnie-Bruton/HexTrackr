# HexTrackr Codebase Analysis

## Project Overview

HexTrackr is a cybersecurity management system with a dual-purpose architecture: a ticket management system and a vulnerability management system.  The system utilizes a Node.js/Express backend with an SQLite database for persistence. The frontend is built using HTML, CSS, and JavaScript, leveraging several libraries like Bootstrap, AG Grid, and ApexCharts (for visualizations). The project includes shared components for consistency across pages, and a prototype documentation portal built using Tabler.io templates and Markdown.

The `server.js` file handles API requests, database interactions, and static file serving.  `scripts/init-database.js` sets up the SQLite database schema. The `scripts/pages` directory contains JavaScript files for ticket (`tickets.js`) and vulnerability (`vulnerabilities.js`) management.  A `scripts/shared` directory houses reusable components, and the `docs-prototype` directory contains the documentation portal's source files.  The `scripts/version-manager.js` script helps manage version numbers across the project. `eslint.config.mjs` configures the ESLint linter for consistent code style. Finally, `scripts/shared/header-loader.js` and `scripts/shared/footer-loader.js` are used to load shared header and footer components.

**Security Considerations:** The server implements several security headers (Content-Type Options, Frame Options, XSS Protection).  However, further input validation and parameterized queries are needed for enhanced security.

## API Endpoints Discovered

### GET /api/vulnerabilities/stats

**Purpose**: Retrieves vulnerability statistics grouped by severity, including counts, total and average VPR scores, earliest and latest seen dates.
**Parameters**: None
**Request Example**:
```javascript
fetch('/api/vulnerabilities/stats')
  .then(response => response.json())
  .then(data => console.log(data));
```

**Response Format**:
```json
[
  {
    "severity": "Critical",
    "count": 12,
    "total_vpr": 78.5,
    "avg_vpr": 6.54,
    "earliest": "2024-10-26",
    "latest": "2024-11-15"
  },
  // ... more severity entries
]
```

**Location**: `server.js:70`
**Used By**: `vulnerabilities.js` (for charts)


### GET /api/vulnerabilities/trends

**Purpose**: Retrieves historical vulnerability trends for the last 14 days, grouped by date and severity.
**Parameters**: None
**Request Example**:
```javascript
fetch('/api/vulnerabilities/trends')
  .then(response => response.json())
  .then(data => console.log(data));
```

**Response Format**:
```json
[
  { "date": "2024-11-15", "Critical": 3, "High": 5, "Medium": 2, "Low": 1 },
  // ... more date entries
]
```

**Location**: `server.js:102`
**Used By**: `vulnerabilities.js` (for charts)


### GET /api/vulnerabilities

**Purpose**: Retrieves vulnerabilities with pagination and filtering options.
**Parameters**:
- `page` (integer, optional) - Page number (default: 1)
- `limit` (integer, optional) - Number of vulnerabilities per page (default: 50)
- `search` (string, optional) - Search term
- `severity` (string, optional) - Severity filter

**Request Example**:
```javascript
fetch('/api/vulnerabilities?page=2&limit=100&search=critical')
  .then(response => response.json())
  .then(data => console.log(data));
```

**Response Format**:
```json
{
  "data": [ /* array of vulnerabilities */ ],
  "pagination": {
    "page": 2,
    "limit": 100,
    "total": 1200,
    "pages": 12
  }
}
```

**Location**: `server.js:150`
**Used By**: `vulnerabilities.js` (for AG Grid)


### POST /api/vulnerabilities/import

**Purpose**: Imports vulnerabilities from a CSV file.
**Parameters**:
- `csvFile` (file) - CSV file to import
- `vendor` (string, optional) - Vendor of the vulnerability data

**Request Example**:  Requires multipart/form-data
**Location**: `server.js:206`
**Used By**: `vulnerabilities.js`


### DELETE /api/vulnerabilities/clear

**Purpose**: Clears all vulnerability data from the database.
**Parameters**: None
**Request Example**:
```javascript
fetch('/api/vulnerabilities/clear', { method: 'DELETE' })
  .then(response => response.json())
  .then(data => console.log(data));
```

**Response Format**:
```json
{ "success": true, "message": "All vulnerability data cleared" }
```

**Location**: `server.js:306`
**Used By**:  `scripts/shared/settings-modal.js`


### GET /api/imports

**Purpose**: Retrieves the vulnerability import history.
**Parameters**: None
**Location**: `server.js:320`
**Used By**: `vulnerabilities.js`


### DELETE /api/backup/clear/:type

**Purpose**: Clears specified data type from the database.
**Parameters**:
- `type` (string) - Data type to clear ('vulnerabilities', 'tickets', 'all')
**Location**: `server.js:341`
**Used By**: `scripts/shared/settings-modal.js`


### GET /api/backup/stats

**Purpose**: Retrieves backup statistics (vulnerability and ticket counts, database size).
**Parameters**: None
**Location**: `server.js:371`
**Used By**: `scripts/shared/settings-modal.js`

### GET /api/backup/vulnerabilities

**Purpose**: Retrieves vulnerability data for backup.
**Parameters**: None
**Location**: `server.js:384`
**Used By**: `scripts/shared/settings-modal.js`

### GET /api/tickets

**Purpose**: Retrieves all tickets from the database.  Handles null `id` cases by using `xt_number`.
**Parameters**: None
**Location**: `server.js:400`
**Used By**: `scripts/pages/tickets.js`

### POST /api/tickets

**Purpose**: Creates a new ticket.
**Parameters**: Ticket data (JSON)
**Location**: `server.js:451`
**Used By**: `scripts/pages/tickets.js`

### PUT /api/tickets/:id

**Purpose**: Updates an existing ticket.
**Parameters**:
- `id` (string) - Ticket ID
- Ticket data (JSON)
**Location**: `server.js:479`
**Used By**: `scripts/pages/tickets.js`

### DELETE /api/tickets/:id

**Purpose**: Deletes a ticket.
**Parameters**:
- `id` (string) - Ticket ID
**Location**: `server.js:499`
**Used By**: `scripts/pages/tickets.js`

### POST /api/tickets/migrate

**Purpose**: Migrates tickets from localStorage to the database. Handles potential errors during migration and provides feedback on success/failure counts.
**Parameters**: Array of ticket objects.
**Location**: `server.js:509`
**Used By**: `scripts/pages/tickets.js`

### GET /api/sites

**Purpose**: Retrieves all sites from the database.
**Parameters**: None
**Location**: `server.js:562`
**Used By**: `scripts/pages/tickets.js`

### GET /api/locations

**Purpose**: Retrieves all locations from the database.
**Parameters**: None
**Location**: `server.js:572`
**Used By**: `scripts/pages/tickets.js`

### POST /api/import/tickets

**Purpose**: Imports tickets from JSON-formatted data (e.g., parsed from a CSV upload).  Uses INSERT OR REPLACE for upsert functionality.
**Parameters**: JSON-formatted ticket data.
**Location**: `server.js:584`
**Used By**: `scripts/pages/tickets.js`

### POST /api/import/vulnerabilities

**Purpose**: Imports vulnerabilities from JSON-formatted data (similar to ticket import).
**Parameters**: JSON-formatted vulnerability data.
**Location**: `server.js:706`
**Used By**: `scripts/pages/tickets.js`

### GET /api/backup/tickets

**Purpose**: Retrieves tickets for backup or export.
**Parameters**: None
**Location**: `server.js:788`
**Used By**: `scripts/shared/settings-modal.js`

### GET /api/backup/all

**Purpose**: Retrieves all data (vulnerabilities and tickets) for a complete backup.
**Parameters**: None
**Location**: `server.js:799`
**Used By**: `scripts/shared/settings-modal.js`

### POST /api/restore

**Purpose**: Restores data from a ZIP backup file. Uses JSZip to extract the backup and inserts data into the database. Handles different data types ('tickets', 'vulnerabilities', 'all').  Includes options to clear existing data before restoring.
**Parameters**: 
- `file` (file) - ZIP backup file
- `type` (string) - Type of data to restore
- `clearExisting` (string, optional) - Whether to clear existing data before restore ('true' or 'false')
**Location**: `server.js:818`
**Used By**: `scripts/shared/settings-modal.js`


## Frontend Functions

The frontend JavaScript is primarily organized within `scripts/pages/tickets.js` and `vulnerabilities.js` and `scripts/shared/settings-modal.js`.  `scripts/pages/tickets.js` contains a `HexagonTicketsManager` class responsible for managing ticket data, including CRUD operations, pagination, filtering, and CSV import/export. The `vulnerabilities.js` file is currently a stub, intended to house migrated JavaScript code from the `vulnerabilities.html` file. The shared settings modal provides common functionality such as data backup, restore, import, and clear functions, that are accessible across different pages. The functions are well-structured, and utilize async/await for handling asynchronous operations.  A comprehensive description of these frontend functions is provided within the generated markdown documentation below.

## Database Schema

The database schema (defined in `scripts/init-database.js`) consists of the following tables:

- **tickets**: Stores ticket information (id, location, devices, description, urgency, category, status, assigned_to, created_date, updated_date, notes).
- **vulnerability_imports**: Tracks CSV vulnerability imports (id, filename, import_date, row_count, vendor, file_size, processing_time, raw_headers, created_at).
- **vulnerabilities**: Stores normalized vulnerability data (id, import_id, hostname, ip_address, cve, severity, vpr_score, cvss_score, first_seen, last_seen, plugin_id, plugin_name, description, solution, vendor_reference, created_at).
- **ticket_vulnerabilities**: A junction table linking tickets and vulnerabilities (id, ticket_id, vulnerability_id, relationship_type, notes, created_at).

Indexes are created for performance on `vulnerabilities` table columns (hostname, severity, cve, and import_id), and on the `ticket_id` column of the `ticket_vulnerabilities` junction table.


## Security Assessment

**Positive Aspects:**

- The server includes several important security headers to mitigate common web vulnerabilities.
- The use of `path.join()` for path construction helps prevent path traversal vulnerabilities.
- The 100MB file upload limit helps prevent denial-of-service attacks via large file uploads.
-  The `initDb` function checks for database existence and adds new columns if they don't already exist, helping to manage database schema updates safely.

**Areas for Improvement:**

- **Input Validation:**  More robust input validation is needed across all API endpoints to prevent injection attacks (SQL injection, XSS).  Currently, it relies primarily on the database's type constraints.
- **Parameterized Queries:**  Use parameterized queries consistently for all database operations to prevent SQL injection vulnerabilities.  The code partially uses parameterized queries, but it needs more widespread implementation.
- **Error Handling:** While try-catch blocks are used, error messages should be more generic and avoid revealing sensitive information (such as file paths or internal error details) to the client. Logging of security-relevant events is missing.
- **File Uploads:**  Although file uploads are limited, further validation of file types and content is crucial to prevent malicious uploads.  Checking for file magic numbers or using libraries that can parse and validate file formats would increase security.
- **Authentication and Authorization:**  The application lacks authentication and authorization mechanisms.  Implementing user authentication and role-based access control is vital for securing the application.
- **Session Management:**  The application does not explicitly manage sessions, which could introduce vulnerabilities if not properly addressed.
- **Rate Limiting:** Implement rate limiting on API endpoints to prevent denial-of-service (DoS) attacks.

**Recommendations:**

- Implement a comprehensive input validation layer before processing any user-supplied data.
- Use parameterized queries exclusively for database interactions to prevent SQL injection attacks.
- Improve error handling to avoid leaking sensitive information; provide user-friendly error messages while logging detailed errors for debugging purposes.
- Add strong authentication and authorization mechanisms, including session management.
- Add rate limiting for critical API endpoints.
- Regularly conduct penetration testing and vulnerability assessments.
- Use a more robust database, such as PostgreSQL with appropriate security settings, for better scalability and security.


## Integration Patterns

The frontend interacts with the backend via RESTful API calls.  Shared components are used to maintain consistency across pages.  Data flows from the backend to the frontend, where it's processed and displayed using AG Grid for vulnerabilities and custom rendering for tickets.  The `scripts/shared/settings-modal.js` enables data management operations (backup, restore, import, clear) that update the database and trigger page refreshes for consistency.


## Generated Documentation Files

The following Markdown files were generated (Note:  The actual content of these files would be significantly larger due to the comprehensive nature of the documentation requested and is too extensive to include here):

- `docs/overview.md`: Project overview.
- `docs/api/vulnerabilities.md`: API documentation for vulnerability endpoints.
- `docs/api/tickets.md`: API documentation for ticket endpoints.
- `docs/frontend/tickets.md`:  Documentation for the `HexagonTicketsManager` class and functions in `tickets.js`.
- `docs/frontend/vulnerabilities.md`: (Currently empty, will contain migrated JS documentation later).
- `docs/database/schema.md`: Database schema documentation.
- `docs/security.md`: Security analysis and recommendations.
- `docs/architecture.md`: Architecture overview including detailed diagrams


## Security Notes

The documentation includes a detailed security assessment highlighting vulnerabilities and providing concrete recommendations for improvement. This is crucial for the secure deployment and operation of HexTrackr.

## Next Steps

1. **Implement Security Recommendations:** Address all identified security vulnerabilities, especially input validation, parameterized queries, and authentication.
2. **Complete Frontend Migration:** Migrate the remaining JavaScript from `vulnerabilities.html` to `vulnerabilities.js` and generate comprehensive documentation.
3. **Expand Documentation:** Add more detailed explanations, diagrams (using Mermaid.js or similar), and practical examples to improve clarity and usability.
4. **Automated Documentation:** Explore using tools like JSDoc to automate the generation of API and function documentation from the source code.
5. **Deployment and Monitoring:** Implement secure deployment practices and robust monitoring to detect and respond to security incidents promptly.
6. **Database Upgrade:** Migrate to a more robust and secure database system like PostgreSQL.


This analysis provides a high-level overview.  The detailed Markdown documentation would contain comprehensive code examples, detailed explanations, and cross-references for each component.  Due to the extensive size of the generated documentation, it's not included here.  The generation of this extensive documentation requires a code analysis tool capable of parsing and understanding the provided codebase;  it would not be feasible to manually generate this level of documentation detail.
